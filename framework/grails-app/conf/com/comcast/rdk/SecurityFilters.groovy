/*
 * If not stated otherwise in this file or this component's Licenses.txt file the
 * following copyright and licenses apply:
 *
 * Copyright 2016 RDK Management
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/
package com.comcast.rdk

/**
 * Generated by the Shiro plugin. This filters class protects all URLs
 * via access control by convention.
 */
class SecurityFilters {
    def publicActions = [     
		user: ['changePassword','registerUser','saveUser'],
		primitiveTest : ['getJson','getStreamDetails'],
		execution : ['saveLoadModuleStatus','saveResultDetails','getDeviceStatusList','getDeviceStatus','thirdPartyJsonResult','thirdPartyTest','showResult','getDetailedTestResult','getClientPort','stopThirdPartyTestExecution','getAgentConsoleLog','getRealtimeDeviceStatus','getExecutionOutput','thirdPartySingleTestExecution','thirdPartyJsonPerformanceResult','getExecutionId','getImageName','getExecutionList', 'getDeviceImageName','thirdPartyMultipleScriptExecution','uploadLogs','getExecutionStatus','exportConsolidatedToExcel','getTMIPAddress','securedUploadLogs', 'resultSummary'],
		deviceGroup : ['uploadAgentBinaries','getDeviceList','deleteDeviceMethod','createNewDevice','uploadTclConfig','getDeviceBoxType','getDeviceDetails','uploadE2EConfig'],
		scriptGroup : ['getScriptsByScriptGroup','getScriptsByModule','getAllScriptGroups','deleteScriptGroup','createNewScriptGroup','verifyScriptGroup','getScriptTimeout','getTestJavaScript'],
		module : ['getModuleScriptTimeOut'],
		thunder : ['thirdPartySingleTestExecutionThunder','thirdPartySuiteExecutionThunder', 'thirdPartyMultipleTestExecutionThunder']
    ];

    private boolean findAction(actionMap, controllerName, actionName) {
        def c = publicActions[controllerName]
        return (c) ? c.find { (it == actionName || it == '*')} != null : false
    }

    def filters = {
        publica(controller: '*', action: '*') {
            before = {

                if (!controllerName) return true
                
                // Check for public controller/actions
                def isPublic = findAction(publicActions, controllerName, actionName)

                if (isPublic){
                    return true
                }
                
                return accessControl()
            }
        }
    }
}
