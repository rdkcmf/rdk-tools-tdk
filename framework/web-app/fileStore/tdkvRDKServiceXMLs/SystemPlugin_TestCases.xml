<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<testPlugin pluginName="System" pluginVersion="1">
        <pluginPreRequisite>
          <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.System" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.System" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.System" />
                <params>
                  <param tag="callsign" value="org.rdk.System" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.System" />
                <params>
                  <param tag="plugin" value="org.rdk.System" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.System" expectedValues="activated"/>
            </testStep>
          </prerequisite>
          <prerequisite requisiteId="2" requisiteName="Register_And_Listen_Events" type="eventRegister" trace="false">
            <event pluginName="System" eventName="Event_MacAddresses_Retreived" />
            <event pluginName="System" eventName="Event_PowerState_Changed" />
            <event pluginName="System" eventName="Event_SystemMode_Changed" />
	    <event pluginName="System" eventName="Event_Temperature_Threshold_Changed" />
	    <event pluginName="System" eventName="Event_Reboot_Request" />
          </prerequisite>

        </pluginPreRequisite>



        <testCase testCaseId="SYS_01" testCaseName= "System_Get_ESTB_MAC" desc="Get requested device detail">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_ESTB_MAC" method="Get_Device_Info">
                <params>
                  <param tag="params"  useConfigFile="true" key="SYSTEM_DEVICE_PARAMS" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_02" testCaseName= "System_Get_Serial_Number" desc="Gets the serial number">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_Serial_No" method="Get_Serial_No">
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_03" testCaseName="System_Get_Version" desc="Gets system version details">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_System_Version" method="Get_System_Version">
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_04" testCaseName= "System_Get_Uptime" desc="Gets system version details">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_System_Uptime" method="Get_System_Uptime">
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_05" testCaseName= "System_Get_Milestones" desc="Gets list of milestones">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_System_Milestones" method="Get_Milestones">
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_06" testCaseName= "System_Get_Device_XConf_Params" desc="Gets Xconf configuration parameters for the device">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_XConf_Params" method="Get_XConf_Params">
                <resultGeneration useMethodTag="system_get_xconf_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_07" testCaseName= "System_Get_RFC_Config" desc="Gets RFC configurations">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_System_RFC_Config" method="Get_RFC_Config">
                <params>
                  <param tag="rfcList"  useConfigFile="true" key="SYSTEM_RFC_PARAMS" />
                </params>
                <resultGeneration useMethodTag="system_get_rfc_info"/>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_08" testCaseName="System_Toggle_GZ_Enabled_Status" desc="Toggle GZ enabled status" >
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_GZ_Enable_Status" method="Get_GZ_Enable_Status" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="system_get_gz_enabled_status" />
            </testStep>
            <testStep testStepId="2" name="Set_GZ_Enable_Status" method="Set_GZ_Enable_Status" revertSet="yes">
                <params>
                  <param tag="enabled" usePreviousResult="true" Id="1" useMethodTag="system_toggle_gz_enabled_status" revertParam="yes" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="3" name="Get_GZ_Enable_Status" method="Get_GZ_Enable_Status" revertFlag="yes">
                <resultGeneration useMethodTag="system_get_gz_enabled_status">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="system_toggle_gz_enabled_status" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_09" testCaseName="System_SetAndGet_Cache_Key_Value" desc="Set and Get Cache Key" >
           <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="Set_Cache_Value" method="Set_Cache_Value">
                <params>
                  <param tag="key"   useDefault="true"/>
                  <param tag="value" useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="2" name="Cache_Contains" method="Cache_Contains">
                <params>
                  <param tag="key"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="system_check_cache" expectedValues="True" />
            </testStep>
            <testStep testStepId="3" name="Get_Cache_Value" method="Get_Cache_Value">
                <params>
                  <param tag="key"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="system_check_cache_key">
                  <expectedValues useDefault="true" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Remove_Cache_Key" method="Remove_Cache_Key">
                <params>
                  <param tag="key"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="5" name="Cache_Contains" method="Cache_Contains">
                <params>
                  <param tag="key"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="system_check_cache" expectedValues="False" />
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_10" testCaseName="System_SetAndGet_Power_State" desc="Set and get device power state" >
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_Available_StandBy_Modes" method="Get_Available_StandBy_Modes" saveResult="true">
                <resultGeneration useMethodTag="system_get_available_standby_modes" arguments="check_mode" expectedValues="LIGHT_SLEEP" />
            </testStep>
            <testStep testStepId="2" name="Get_Preferred_StandBy_Mode" method="Get_Preferred_StandBy_Mode" saveResult="true">
                <resultGeneration useMethodTag="system_get_preferred_standby_mode" />
            </testStep>
            <testStep testStepId="3" name="Set_Preferred_StandBy_Mode" method="Set_Preferred_StandBy_Mode" >
                <conditionalExecution enable="true" Id="2" useMethodTag="system_check_preferred_standby_mode" arguments="isNotEqual,LIGHT_SLEEP" />
                <params>
                  <param tag="standbyMode" value="LIGHT_SLEEP" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="4" name="Get_Power_State" method="Get_Power_State" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="system_get_power_state"/>
            </testStep>
            <testStep testStepId="5" name="Set_Power_State" method="Set_Power_State" revertSet="yes">
                <params>
                  <param tag="standbyReason"  useDefault="true" />
                  <param tag="powerState"   usePreviousResult="true" Id="4" useMethodTag="system_switch_power_state" revertParam="yes" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="6" name="Power_State_changed_Event" event="Event_PowerState_Changed" action="eventListener" delay="30">
              <resultGeneration useMethodTag="system_validate_power_mode" >
                  <expectedValues usePreviousResult="true" Id="4" useMethodTag="system_switch_power_state" />
              </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Get_Power_State" method="Get_Power_State" revertFlag="yes">
                <resultGeneration useMethodTag="system_get_power_state">
                    <expectedValues usePreviousResult="true" Id="4" useMethodTag="system_switch_power_state" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_11" testCaseName="System_SetAndGet_Preferred_StandBy_Mode" desc="Set and get preferred standby mode" >
           <testCaseInfo testCaseType="loop" revert="true" />
            <testStep testStepId="1" name="Get_Available_StandBy_Modes" method="Get_Available_StandBy_Modes" saveResult="true" >
                <resultGeneration useMethodTag="system_get_available_standby_modes" />
            </testStep>
            <testStep testStepId="2" name="Get_Preferred_StandBy_Mode" method="Get_Preferred_StandBy_Mode" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="system_get_preferred_standby_mode" />
            </testStep>
            <testStep testStepId="3" name="SetAndGet_Preferred_StandBy_Mode" testStepType="loop">
              <subtestStep testStepId="1" name="Set_Preferred_StandBy_Mode" method="Set_Preferred_StandBy_Mode" revertSet="yes">
                  <params>
                    <param tag="standbyMode" usePreviousResult="true" Id="1" useMethodTag="system_get_available_standby_modes" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="system_check_set_operation" />
              </subtestStep>
              <subtestStep testStepId="2" name="Get_Preferred_StandBy_Mode" method="Get_Preferred_StandBy_Mode" revertFlag="yes">
                  <resultGeneration useMethodTag="system_get_preferred_standby_mode">
                      <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>
        <testCase testCaseId="SYS_12" testCaseName="System_SetAndGet_TimeZone_DST" desc="Set and get DST time zone" >
           <testCaseInfo testCaseType="direct"  />
            <testStep testStepId="1" name="Set_TimeZone_DST" method="Set_TimeZone_DST" >
                <params>
                  <param tag="timeZone" value="UTC-5" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="2" name="Get_TimeZone_DST" method="Get_TimeZone_DST" >
                <resultGeneration useMethodTag="system_get_timezone_dst" arguments="check_timezone" expectedValues="UTC-5" />
            </testStep>
        </testCase>

        <testCase testCaseId="SYS_13" testCaseName= "System_Get_State_Info" desc="Gets state info of provided property">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_State_Info" method="Get_State_Info">
              <params>
                <param tag="param"  useConfigFile="true" key="SYSTEM_PROP_CHANNEL_MAP" />
              </params>
                <resultGeneration useMethodTag="system_get_state_info" />
            </testStep>
        </testCase>

        <!-- Test case 14 -->
        <testCase testCaseId="SYS_14" testCaseName= "System_Clear_Last_DeepSleep_Reason" desc="Clear the last deep sleep reason.">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="SYSTEM_DEVICE_FEATURES" useMethodTag="system_check_feature_applicability" arguments="DeepSleep" />
            <testStep testStepId="1" name="Clear_Last_DeepSleep_Reason" method="Clear_Last_DeepSleep_Reason" >
              <resultGeneration useMethodTag="system_get_state_info"/>
            </testStep>
        </testCase>

        <!-- Test case 15 -->
        <testCase testCaseId="SYS_15" testCaseName= "System_Get_Core_Temperature" desc="Fetch the core temperature of the device.">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="SYSTEM_DEVICE_FEATURES" useMethodTag="system_check_feature_applicability" arguments="CoreTemperature" />
            <testStep testStepId="1" name="Get_Core_Temperature" method="Get_Core_Temperature" >
              <resultGeneration useMethodTag="system_validate_core_temperature"/>
            </testStep>
        </testCase>

        <!-- Test case 16 -->
        <testCase testCaseId="SYS_16" testCaseName= "System_Get_Last_DeepSleep_Reason" desc="Retrieve the last deep sleep reason.">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="SYSTEM_DEVICE_FEATURES" useMethodTag="system_check_feature_applicability" arguments="DeepSleep" />
            <testStep testStepId="1" name="Get_Last_DeepSleep_Reason" method="Get_Last_DeepSleep_Reason" >
              <resultGeneration useMethodTag="system_get_state_info"/>
            </testStep>
        </testCase>

        <!-- Test case 17 -->
        <testCase testCaseId="SYS_17" testCaseName= "System_Get_Mode" desc="Retrieve the currently set mode information.">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Mode" method="Get_Mode" >
              <resultGeneration useMethodTag="system_validate_modes"  >
                <expectedValues useDefault="true" />
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 18 -->
        <testCase testCaseId="SYS_18" testCaseName= "System_Get_PreviousReboot_Info" desc="Retrieve basic information about a reboot">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="System_reboot" method="Reboot" rebootStep="yes" >
              <resultGeneration useMethodTag="system_check_set_operation"  />
            </testStep>
            <testStep testStepId="2" name="Get_PreviousReboot_Info" method="Get_PreviousReboot_Info" >
              <resultGeneration useMethodTag="system_get_state_info"  />
            </testStep>
        </testCase>

        <!-- Test case 19 -->
        <testCase testCaseId="SYS_19" testCaseName= "System_Get_PreviousReboot_Info2" desc="Retrieve detailed information about a reboot">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="System_reboot" method="Reboot" rebootStep="yes" >
              <resultGeneration useMethodTag="system_check_set_operation"  />
            </testStep>
            <testStep testStepId="2" name="Get_PreviousReboot_Info2" method="Get_PreviousReboot_Info2" >
              <resultGeneration useMethodTag="system_get_state_info" arguments="rebootInfo" />
            </testStep>
        </testCase>

        <!-- Test case 20 -->
        <testCase testCaseId="SYS_20" testCaseName= "System_Get_PreviousReboot_Reason" desc="Retrieve the last reboot reason.">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="System_reboot" method="Reboot" rebootStep="yes" >
              <resultGeneration useMethodTag="system_check_set_operation"  />
            </testStep>
            <testStep testStepId="2" name="Get_PreviousReboot_Reason" method="Get_PreviousReboot_Reason" >
              <resultGeneration useMethodTag="system_get_state_info"  />
            </testStep>
        </testCase>

        <!-- Test case 21 -->
        <testCase testCaseId="SYS_21" testCaseName= "System_Get_Temperature_Thresholds" desc="Retrieves temperature threshold values.">
            <testCaseInfo testCaseType="direct"  configurableTest="true" testKey="SYSTEM_DEVICE_FEATURES" useMethodTag="system_check_feature_applicability" arguments="TemperatureThreshold"/>
            <testStep testStepId="1" name="Get_Temperature_Thresholds" method="Get_Temperature_Thresholds" >
              <resultGeneration useMethodTag="system_get_state_info"  arguments="temperatureThresholds" />
            </testStep>
        </testCase>

        <!-- Test case 22 -->
        <testCase testCaseId="SYS_22" testCaseName= "System_Has_Reboot_BeenRequested" desc="Check whether a reboot has been requested.">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Has_Reboot_BeenRequested" method="Has_Reboot_BeenRequested" >
              <resultGeneration useMethodTag="system_validate_bool_result" arguments="rebootRequested">
                <expectedValues useDefault="true"/>
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 23 -->
        <testCase testCaseId="SYS_23" testCaseName= "System_Query_MocaStatus" desc="Check whether Moca is enabled">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Query_MocaStatus" method="Query_MocaStatus" >
              <resultGeneration useMethodTag="system_validate_bool_result" arguments="mocaEnabled">
                <expectedValues useDefault="true"/>
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 24 -->
        <testCase testCaseId="SYS_24" testCaseName="System_SetAndGet_NORMAL_Mode" desc="Set and get STB mode to NORMAL" >
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_STB_Mode" method="Get_Mode" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="system_validate_modes"/>
            </testStep>
            <testStep testStepId="2" name="Set_STB_Mode_NORMAL" method="Set_Mode" revertSet="yes">
                <params>
                  <param tag="duration"  useDefault="true" />
                  <param tag="mode" useDefault="true" revertParam="yes" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="3" name="Get_STB_Mode" method="Get_Mode" revertFlag="yes" delay="5">
                <resultGeneration useMethodTag="system_validate_modes" expectedValues="NORMAL" />
            </testStep>
        </testCase>

        <!-- Test case 25 -->
        <testCase testCaseId="SYS_25" testCaseName= "System_GetMac_Address" desc="Get Mac Address">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_MacAddress" method="Get_MacAddress" >
                <params>
                  <param tag="GUID"   useDefault="true"/>
                </params>
              <resultGeneration useMethodTag="system_validate_bool_result" arguments="asyncResponse">
                <expectedValues useDefault="true"/>
              </resultGeneration>
            </testStep>
            <testStep testStepId="2" name="Check_Mac_Address" event="Event_MacAddresses_Retreived" action="eventListener" delay="2">
              <resultGeneration useMethodTag="system_check_macaddress_event" arguments="estb_mac"/>
            </testStep>
        </testCase>

        <!-- Test case 26 -->
        <testCase testCaseId="SYS_26" testCaseName= "System_SetAndGet_Temperature_Thresholds" desc="Set and get temperature thresholds">
            <testCaseInfo testCaseType="setandget" revert="true" configurableTest="true" testKey="SYSTEM_DEVICE_FEATURES" useMethodTag="system_check_feature_applicability" arguments="TemperatureThreshold"/>
            <testStep testStepId="1" name="Get_Temperature_Thresholds" method="Get_Temperature_Thresholds" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="system_get_state_info"  />
            </testStep>
            <testStep testStepId="2" name="Set_Temperature_Thresholds" method="Set_Temperature_Thresholds" revertSet="yes">
                <params paramKey="thresholds">
                  <param tag="WARN"   usePreviousResult="true" Id="1" useMethodTag="system_generate_new_temperature_thresholds" arguments="warn" revertParam="yes" />
                  <param tag="MAX"   usePreviousResult="true" Id="1" useMethodTag="system_generate_new_temperature_thresholds" arguments="max" revertParam="yes" />
                </params>
                <resultGeneration useMethodTag="system_get_state_info"  />
            </testStep>
            <testStep testStepId="3" name="Get_Temperature_Thresholds" method="Get_Temperature_Thresholds"  revertFlag="yes" >
                <resultGeneration useMethodTag="system_verify_thresholds_params"  >
                  <expectedValues  usePreviousResult="true" Id="2" useMethodTag="system_generate_new_temperature_thresholds" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Check_Temperature_Thresholds_Change_Event" event="Event_Temperature_Threshold_Changed" action="eventListener" delay="3"  >
              <resultGeneration useMethodTag="system_check_temperature_threshold_change_event"/>
            </testStep>
        </testCase>
        <testCase testCaseId="SYS_27" testCaseName= "System_Get_Image_Version" desc="Gets the image version">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_Image_Version" method="Get_Device_Info">
                <params>
                  <param tag="params" value="imageVersion" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_28" testCaseName= "System_Get_model_number" desc="Gets the model number">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_model_number" method="Get_Device_Info">
                <params>
                  <param tag="params" value="model_number" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_29" testCaseName= "System_Get_boxIP" desc="Gets the box IP">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_boxIP" method="Get_Device_Info">
                <params>
                  <param tag="params" value="boxIP" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_30" testCaseName= "System_Get_build_type" desc="Gets the build type">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_build_type" method="Get_Device_Info">
                <params>
                  <param tag="params" value="build_type" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_31" testCaseName= "System_Get_eth_mac" desc="Gets eth mac of the device">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_eth_mac" method="Get_Device_Info">
                <params>
                  <param tag="params" value="eth_mac" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_32" testCaseName= "System_Get_rf4ce_mac" desc="Gets the rf4ce mac of the device">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="RF4CE_MAC" useMethodTag="system_check_feature_applicability" arguments="Enable"/>
            <testStep testStepId="1" name="Get_Device_rf4ce_mac" method="Get_Device_Info">
                <params>
                  <param tag="params" value="rf4ce_mac" />
                </params>
                <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_33" testCaseName= "System_Get_Bluetooth_mac" desc="Gets device bluetooth mac">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_Bluetooth_Mac" method="Get_Device_Info">
                <params>
                  <param tag="params" value="bluetooth_mac" />
                </params>
                <resultGeneration useMethodTag="system_check_mac_address" arguments="bluetooth_mac" />
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_34" testCaseName= "System_Get_WiFi_Mac" desc="Gets device WiFi mac">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_WiFi_Mac" method="Get_Device_Info">
                <params>
                  <param tag="params" value="wifi_mac" />
                </params>
                <resultGeneration useMethodTag="system_check_mac_address" arguments="wifi_mac" />
            </testStep>
       </testCase>
       <!--testCase testCaseId="SYS_35" testCaseName="Check_Power_State_Before_Reboot" desc="Checks the powerstate before reboot" >
            <testCaseInfo testCaseType="direct" revert="true" />
            <testStep testStepId="1" name="Get_Power_State" method="Get_Power_State" saveResult="true" >
                <resultGeneration useMethodTag="system_get_power_state"/>
            </testStep>
            <testStep testStepId="2" name="Execute_Reboot_Command" action="externalFnCall" rebootStep="yes">
                <resultGeneration useMethodTag="executeRebootCmd"/>
            </testStep>
            <testStep testStepId="3" name="Get_Power_State_Before_Reboot" method="Get_Power_State_Before_Reboot" saveResult="true" >
                <resultGeneration useMethodTag="system_validate_powerstate_before_reboot">
                  <expectedValues usePreviousResult="true" Id="1" useMethodTag="system_get_powerstate_before_reboot"/>
                </resultGeneration>
            </testStep>
       </testCase-->
       <testCase testCaseId="SYS_35" testCaseName="System_Check_On_SystemMode_Changed" desc="Checks for the system mode changed event" >
           <testCaseInfo testCaseType="direct" revert="true" />
            <testStep testStepId="1" name="Get_STB_Mode" method="Get_Mode" >
                <resultGeneration useMethodTag="system_validate_modes"/>
            </testStep>
            <testStep testStepId="2" name="Set_STB_Mode_WAREHOUSE" method="Set_Mode">
                <params>
                  <param tag="duration"  value="5" />
                  <param tag="mode" value="WAREHOUSE" />
                </params>
                <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="3" name="Get_STB_Mode" method="Get_Mode" >
                <resultGeneration useMethodTag="system_validate_modes" expectedValues="WAREHOUSE" />
            </testStep>
            <testStep testStepId="4" name="Check_On_SystemMode_Changed_Event" event="Event_SystemMode_Changed" action="eventListener"  >
              <resultGeneration useMethodTag="system_check_system_mode_change_event" expectedValues="WAREHOUSE"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_SystemMode_Changed_Event" event="Event_SystemMode_Changed" action="eventListener"  delay="5">
              <resultGeneration useMethodTag="system_check_system_mode_change_event" expectedValues="NORMAL"/>
            </testStep>
            <testStep testStepId="6" name="Get_STB_Mode" method="Get_Mode" >
                <resultGeneration useMethodTag="system_validate_modes" expectedValues="NORMAL" />
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_36" testCaseName= "System_Check_Reboot_Reason_Event" desc="Retrieve basic information about a reboot">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="System_reboot" method="Reboot" closeConn="false" rebootStep="yes">
               <params>
                  <param tag="rebootReason" value="API Validation" />
               </params>
              <resultGeneration useMethodTag="system_check_set_operation"  />
            </testStep>
            <testStep testStepId="2" name="Check_On_Reboot_Request_Event" event="Event_Reboot_Request" action="eventListener" delay="60">
              <resultGeneration useMethodTag="system_check_reboot_reason_event" expectedValues= "API Validation" />
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_37" testCaseName="Enable_And_Disable_Telemetry_OptOut_Status"  desc="Checks whether able to enable and disable the telemetry opt-out status">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_OptOut_Telemetry_Status" method="Get_OptOut_Telemetry_Status"  saveResult="true" revertGet="yes">
              <resultGeneration useMethodTag="system_check_telemetry_optout_status" />
            </testStep>
            <testStep testStepId="2" name="Enable_And_Disable_Telemetry_OptOut_Status" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_OptOut_Telemetry_Status" method="Set_OptOut_Telemetry_Status" revertSet="yes">
                  <params>
                    <param tag="Opt-Out" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="system_check_set_operation" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_OptOut_Telemetry_Status" method="Get_OptOut_Telemetry_Status" revertFlag="yes" >
                  <resultGeneration useMethodTag="system_check_telemetry_optout_status" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
       </testCase>
       <testCase testCaseId="SYS_38" testCaseName= "System_Upgrade_Image" desc="Upgrades to specified firmware version" >
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="XCONF_SERVER_SUPPORT" useMethodTag="system_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Check_Version_File" action="externalFnCall" >
             <resultGeneration useMethodTag="Check_Version_File"/>
            </testStep>
            <testStep testStepId="2" name="Get_Downloaded_Firmware_Info"  method="Get_Downloaded_Firmware_Info" saveResult="true" >
             <resultGeneration useMethodTag="system_get_downloaded_firmware_info" />
            </testStep>
            <testStep testStepId="3" name="Check_include.properties_File" action="externalFnCall" >
             <resultGeneration useMethodTag="check_include.properties_file">
                  <arguments useConfigFile="true" key="XCONF_SERVER_URL" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Check_SWupdate_File" action="externalFnCall" >
             <resultGeneration useMethodTag="check_swupdate_file">
                  <arguments useConfigFile="true" key="XCONF_SERVER_URL" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="5" name="Get_ESTB_MAC" method="Get_Device_Info" saveResult="true" >
              <params>
                  <param tag="params"  useConfigFile="true" key="SYSTEM_DEVICE_PARAMS" />
              </params>
             <resultGeneration useMethodTag="system_get_api_info"/>
            </testStep>
            <testStep testStepId="6" name="Set_xconfServerConfigurations" action="externalFnCall" >
             <resultGeneration useMethodTag="Set_xconfServerConfigurations" >
                  <arguments value="upgrade_image" usePreviousResult="true" Id="5" useMethodTag="system_get_estb_mac" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Check_disk_partition" action="externalFnCall" saveResult="true" >
             <resultGeneration useMethodTag="Check_disk_partition" />
            </testStep>
            <testStep testStepId="8" name="Update_Firmware"  method="Update_Firmware" rebootStep="yes">
             <conditionalExecution enable="true" Id="7" useMethodTag="system_check_disk_partition" arguments="4" />
             <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="9" name="Check_disk_partition" action="externalFnCall" >
             <conditionalExecution enable="true" Id="7" useMethodTag="system_check_disk_partition" arguments="4"/>
             <resultGeneration useMethodTag="Check_disk_partition" expectedValues="4" arguments="after_reboot"/>
            </testStep>
            <testStep testStepId="10" name="Update_Firmware"  method="Update_Firmware" >
             <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="11" name="Check_Current_Version"  method="Get_Downloaded_Firmware_Info" delay="1800" PluginOnStep="yes">
             <resultGeneration useMethodTag="system_get_downloaded_firmware_info" arguments="check_image" >
                <expectedValues useConfigFile="true" key="FIRMWARE_VERSION"/>
             </resultGeneration>
            </testStep>
            <testStep testStepId="12" name="Check_Version_File" action="externalFnCall" >
             <resultGeneration useMethodTag="Check_Version_File"/>
            </testStep>
            <testStep testStepId="13" name="Check_include.properties_File" action="externalFnCall" >
             <resultGeneration useMethodTag="check_include.properties_file">
                  <arguments useConfigFile="true" key="XCONF_SERVER_URL" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="14" name="Check_SWupdate_File" action="externalFnCall" >
             <resultGeneration useMethodTag="check_swupdate_file">
                  <arguments useConfigFile="true" key="XCONF_SERVER_URL" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="15" name="Set_xconfServerConfigurations" action="externalFnCall" >
             <resultGeneration useMethodTag="Set_xconfServerConfigurations" >
                  <arguments value="revert_image" usePreviousResult="true" Id="5" useMethodTag="system_get_estb_mac" />
             </resultGeneration>
            </testStep>
            <testStep testStepId="16" name="Check_disk_partition" action="externalFnCall" saveResult="true" >
             <resultGeneration useMethodTag="Check_disk_partition" />
            </testStep>
            <testStep testStepId="17" name="Update_Firmware"  method="Update_Firmware" rebootStep="yes">
             <conditionalExecution enable="true" Id="16" useMethodTag="system_check_disk_partition" arguments="4" />
             <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="18" name="Check_disk_partition" action="externalFnCall" >
             <conditionalExecution enable="true" Id="16" useMethodTag="system_check_disk_partition" arguments="4"/>
             <resultGeneration useMethodTag="Check_disk_partition" expectedValues="4" arguments="after_reboot"/>
            </testStep>
            <testStep testStepId="19" name="Update_Firmware"  method="Update_Firmware">
             <resultGeneration useMethodTag="system_check_set_operation" />
            </testStep>
            <testStep testStepId="20" name="Check_Current_Version"  method="Get_Downloaded_Firmware_Info" delay="1800" PluginOnStep="yes">
             <resultGeneration useMethodTag="system_get_downloaded_firmware_info" arguments="check_image" >
                <expectedValues usePreviousResult="true" Id="2" useMethodTag="system_get_current_image_name"/>
             </resultGeneration>
            </testStep>
       </testCase>
</testPlugin>
