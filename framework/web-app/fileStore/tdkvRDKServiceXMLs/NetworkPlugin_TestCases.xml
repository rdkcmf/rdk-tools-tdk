<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<testPlugin pluginName="Network" pluginVersion="1">

        <pluginPreRequisite>
          <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Network" />
                <params>
                  <param tag="callsign" value="org.rdk.Network" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Network" />
                <params>
                  <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" expectedValues="activated"/>
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="2" requisiteName="Activate_Wifi_Plugin">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                <params>
                  <param tag="callsign" value="org.rdk.Wifi" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                <params>
                  <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" />
            </testStep>
          </prerequisite>
          
          <prerequisite requisiteId="3" requisiteName="Activate_System_Plugin">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.System" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.System" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.System" />
                <params>
                  <param tag="callsign" value="org.rdk.System" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.System" />
                <params>
                  <param tag="plugin" value="org.rdk.System" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.System" />
            </testStep>
          </prerequisite>
          <!-- Only if You have not connected ethernet or you enabled the RFC for default interface -->
          <!--
          <prerequisite requisiteId="3" requisiteName="Check_WIFI_Adapter_State">
            <testStep testStepId="1" pluginName="Wifi" name="Get_Current_State" method="Get_Current_State" saveResult="true" >
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_state_valid"/>
            </testStep>
            <testStep testStepId="2" pluginName="Wifi" name="Enable_WIFI_Adapter" method="Set_Enabled">
                <conditionalExecution enable="true" Id="1" useMethodTag="wifi_check_adapter_state" arguments="isDisabled" />
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" pluginName="Wifi"  name="Get_Current_State" method="Get_Current_State">
                <conditionalExecution enable="true" Id="1" useMethodTag="wifi_check_adapter_state" arguments="isDisabled" />
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_state_enabled"/>
            </testStep>
          </prerequisite> -->

          <prerequisite requisiteId="4" requisiteName="Register_And_Listen_Events" type="eventRegister" trace="false">
            <event pluginName="Network" eventName="Event_Interface_Status_Changed" />
            <event pluginName="Network" eventName="Event_Connection_Status_Changed" />
	    <event pluginName="Network" eventName="Event_IPAddress_Status_Changed" />
	    <event pluginName="Controller" eventName="Event_Controller_State_Changed" />
          </prerequisite>

	  <prerequisite requisiteId="5" requisiteName="Enable_Preferred_network_parameter" >
            <testStep testStepId="1" name="Enable_Preferred_Network_Parameter"  action="externalFnCall"  >
                <resultGeneration useMethodTag="Enable_TR181_Parameter" >
                  <arguments useConfigFile="true" key="PREFERRED_NETWORK_PARAMETER"/>
                </resultGeneration>
            </testStep>
          </prerequisite>
        </pluginPreRequisite>

        <testCase testCaseId="NW_01" testCaseName="Network_Get_Device_Interfaces" desc="Gets list of interfaces supported by device" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_Interfaces" method="Get_Interfaces">
                <resultGeneration useMethodTag="network_get_interface_info" arguments="get_all_info" />
            </testStep>
        </testCase>


        <testCase testCaseId="NW_02" testCaseName="Network_Get_Default_Interface" desc="Gets the default network interface" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Device_Interfaces" method="Get_Interfaces" saveResult="true">
                <resultGeneration useMethodTag="network_get_interface_info" arguments="get_interface_names" />
            </testStep>
            <testStep testStepId="2" name="Get_Default_Interface" method="Get_Default_Interface">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_get_interface_names" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="NW_03" testCaseName="Network_Get_STB_IP" desc="Gets IP address of the default interface" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_STB_IP" method="Get_STB_IP">
                <resultGeneration useMethodTag="network_check_results" />
            </testStep>
        </testCase>

        <testCase testCaseId="NW_04" testCaseName="Network_Ping_Host"  desc="Pings the specified end point" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Ping_Host" method="Ping" timeoutKey="CUSTOM_TIMEOUT_FOR_PING_AND_TRACE">
                <params>
                  <param tag="endpoint"  useConfigFile="true" key="PING_IP" />
                  <param tag="packets"   useDefault="true" />
                </params>
                <resultGeneration useMethodTag="network_get_ping_response" arguments="check_target">
                    <expectedValues useDefault="true" useConfigFile="true" key="PING_IP"/>
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="NW_05" testCaseName="Network_Ping_Named_EndPoints" desc="Pings the endpoint named by endpointName" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Named_EndPoints" method="Get_NamedEndPoints" saveResult="true">
                <resultGeneration useMethodTag="network_get_named_endpoints" />
            </testStep>
            <testStep testStepId="2" name="Ping_Named_Endpoint" method="Ping_NamedEndpoint">
                <params>
                  <param tag="endpointName"  usePreviousResult="true" Id="1" useMethodTag="network_get_endpoint_name" />
                  <param tag="packets"   useDefault="true" />
                </params>
                <resultGeneration useMethodTag="network_get_ping_response" >
                    <expectedValues useDefault="true" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="NW_06" testCaseName="Network_Trace_Host" desc="Traces the specified endpoint host IP" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Trace_Host" method="Trace" timeoutKey="CUSTOM_TIMEOUT_FOR_PING_AND_TRACE">
                <params>
                  <param tag="endpoint"  useConfigFile="true" key="TRACE_IP" />
                  <param tag="packets"   useDefault="true" />
                </params>
                <resultGeneration useMethodTag="network_get_trace_response" arguments="check_target">
                    <expectedValues useConfigFile="true" key="TRACE_IP"/>
                </resultGeneration>
            </testStep>
        </testCase>


        <testCase testCaseId="NW_07" testCaseName="Network_Trace_Named_EndPoints" desc="Traces the endpoint named by endpointName" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Named_EndPoints" method="Get_NamedEndPoints" saveResult="true">
                <resultGeneration useMethodTag="network_get_named_endpoints" />
            </testStep>
            <testStep testStepId="2" name="Trace_Named_Endpoint" method="Trace_NamedEndpoint">
                <params>
                  <param tag="endpointName"  usePreviousResult="true" Id="1" useMethodTag="network_get_endpoint_name" />
                  <param tag="packets"   useDefault="true" />
                  <param tag="guid"   useDefault="true" />
                </params>
                <resultGeneration useMethodTag="network_get_trace_response" />
            </testStep>
        </testCase>

        
        <testCase testCaseId="NW_08" testCaseName="Network_Get_Default_Interface_IP_Settings" desc="Gets IP settings of default interface" >
           <testCaseInfo testCaseType="direct" configurableTest="true" testKey="NETWORK_SUPPORTED_FEATURES" useMethodTag="network_check_feature_applicability" arguments="InterfaceIPSettings" />
            <testStep testStepId="1" name="Enable_Manual_IPSettings"  action="externalFnCall"  >
                <resultGeneration useMethodTag="Enable_TR181_Parameter" >
                  <arguments useConfigFile="true" key="MANUAL_IPSETTINGS_PARAMETER"/>
                </resultGeneration>
            </testStep>
            <testStep testStepId="2" name="Get_Default_Interface" method="Get_Default_Interface" saveResult="true">
                <resultGeneration useMethodTag="network_get_default_interface" />
            </testStep>
            <testStep testStepId="3" name="Get_IP_Settings" method="Get_IP_Settings">
                <params>
                  <param tag="interface"  usePreviousResult="true" Id="2" useMethodTag="network_get_default_interface_name" />
                </params>
                <resultGeneration useMethodTag="network_get_ip_settings" >
                    <expectedValues  usePreviousResult="true" Id="2" useMethodTag="network_get_default_interface_name" />
                </resultGeneration>
            </testStep>
        </testCase>


        <testCase testCaseId="NW_09" testCaseName="Network_Toggle_WIFI_Interface_Status" desc="Toggle wifi interface enabled status" >
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" saveResult="true" revertGet="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" revertSet="yes">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" revertParam="yes" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" revertFlag="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="NW_10" testCaseName="Check_Interface_Status_Changed_Event" desc="Checks for the interface status change  event">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" saveResult="true" revertGet="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" revertSet="yes">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" revertParam="yes" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" revertFlag="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Check_Interface_Status_Change_Event" event="Event_Interface_Status_Changed" action="eventListener" delay="3"  >
                <resultGeneration useMethodTag="network_check_interface_status_change_event" >
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" />
                </resultGeneration>
            </testStep>
        </testCase>

        <testCase testCaseId="NW_11" testCaseName="Check_Connection_Status_Changed"  desc="Checks for the connection status change event" >
            <testStep testStepId="1" pluginName="Wifi" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" pluginName="Wifi"  name="Connect" method="Connect" delay="5">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" pluginName="Wifi"  name="Get_Connected_SSID" method="Get_Connect_SSID" delay="5">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Check_Connection_Status_Change_Event" event="Event_Connection_Status_Changed" action="eventListener" delay="10"  >
                <resultGeneration useMethodTag="network_connection_status_change_event" expectedValues="CONNECTED" />
            </testStep>
            <testStep testStepId="5" pluginName="Wifi" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="6" name="Check_Connection_Status_Change_Event" event="Event_Connection_Status_Changed" action="eventListener" delay="10"  >
                <resultGeneration useMethodTag="network_connection_status_change_event" expectedValues="DISCONNECTED" />
            </testStep>
            <testStep testStepId="7" pluginName="Wifi" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_12" testCaseName="Check_IPAddress_Status_Changed"  desc="Checks for the ipaddress status change event" >
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" pluginName="Wifi" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled"  >
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Get_STB_IP" method="Get_STB_IP" saveResult="true" >
                <resultGeneration useMethodTag="network_check_results" />
            </testStep>
            <testStep testStepId="4" pluginName="Wifi"  name="Connect" method="Connect" delay="5">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" pluginName="Wifi" name="Get_Connected_SSID" method="Get_Connect_SSID" delay="5"  >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="6" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="7" name="Get_Default_Interface" method="Get_Default_Interface" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="8" name="Check_STB_IP" method="Get_STB_IP"  >
                <resultGeneration useMethodTag="network_check_device_ip_changed" >
                    <expectedValues usePreviousResult="true" Id="3" useMethodTag="network_get_stb_ip"/>
            </resultGeneration>
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface"  ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface" delay="50"  >
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="4" name="Stop_Scan" method="Stop_Scan" pluginName="Wifi" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>
       <testCase testCaseId="NW_13" testCaseName="Check_Internet_Connectivity" desc="Checks the internet connectivity">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Set_Connectivity_Endpoints" method="Set_Connectivity_Test_Endpoints">
                <params>
                  <param tag="endpoints"  useConfigFile="true" key="CONNECTIVITY_TEST_ENDPOINTS" />
                </params>
                <resultGeneration useMethodTag="network_check_results"/>
            </testStep>
            <testStep testStepId="2" name="Check_ConnectedTo_Internet" method="Is_ConnectedTo_Internet" >
                <resultGeneration useMethodTag="network_check_connectedto_internet" expectedValues="true"/>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_14" testCaseName="Get_STB_IP_Family" desc="Gets the IP address of the default interface by address family" >
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_STB_IP_Family" method="Get_STB_IP_Family" saveResult ="true" >
                <params>
                  <param tag="family"  value="AF_INET" />
                </params>
                <resultGeneration useMethodTag="network_check_results"/>
            </testStep>
            <testStep testStepId="2" name="Check_STB_IP" action="externalFnCall" >
                <resultGeneration useMethodTag="network_check_stb_ip_family" >
                  <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_get_stb_ip" />
                </resultGeneration>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_15" testCaseName="Network_Ping_Invalid_Endpoint"  desc="Pings the invalid endpoint" >
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Ping_Host" method="Ping" timeoutKey="CUSTOM_TIMEOUT_FOR_PING_AND_TRACE">
                <params>
                  <param tag="endpoint"  value="0.42.42.42" />
                  <param tag="packets"   useDefault="true" />
                </params>
                <resultGeneration useMethodTag="network_get_ping_response" arguments="validate_error_message" expectedValues="0.42.42.42,could not ping endpoint"/>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_16" testCaseName="Network_ActivateDeactivate_Event_Test" desc="Validates statechange event on Activating/deactivating the plugin">
             <testCaseInfo testCaseType="direct" />
             <testCasePreRequisite>
                 <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
                   <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                     <params>
                       <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                     </params>
                     <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" />
                   </testStep>
                   <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                     <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Network" />
                     <params>
                       <param tag="callsign" value="org.rdk.Network" />
                     </params>
                   </testStep>
                   <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                     <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Network" />
                     <params>
                       <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                     </params>
                     <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" expectedValues="activated"/>
                   </testStep>
                </prerequisite>
            </testCasePreRequisite>
            <testStep testStepId="1" name="Deactivate_Network_Plugin" method="Deactivate_Plugin"  pluginName="Controller">
                  <params>
                    <param tag="callsign"  value="org.rdk.Network" />
                  </params>
            </testStep>
            <testStep testStepId="2" name="Check_State_Change_Event" event="Event_Controller_State_Changed" action="eventListener" delay="2" pluginName="Controller">
              <resultGeneration useMethodTag="controller_check_state_change_event" expectedValues="org.rdk.network,deactivated,requested"/>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                 <params>
                     <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                 </params>
                 <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" expectedValues="deactivated"/>
            </testStep>
            <testStep testStepId="4" name="Activate_Network_Plugin" method="Activate_Plugin"  pluginName="Controller" delay="1">
                  <params>
                    <param tag="callsign" value="org.rdk.Network" />
                  </params>
            </testStep>
            <testStep testStepId="5" name="Check_State_Change_Event" event="Event_Controller_State_Changed" action="eventListener" delay="2" pluginName="Controller">
              <resultGeneration useMethodTag="controller_check_state_change_event" expectedValues="org.rdk.network,activated,requested"/>
            </testStep>
            <testStep testStepId="6" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller" PluginOnStep="yes" >
                 <params>
                     <param tag="plugin" value="org.rdk.Network" indexOnly="true" />
                 </params>
                 <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Network" expectedValues="activated"/>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_17" testCaseName="Network_Validate_IP_Settings" desc="Validates the IP Settings" >
           <testCaseInfo testCaseType="direct" configurableTest="true" testKey="NETWORK_SUPPORTED_FEATURES" useMethodTag="network_check_feature_applicability" arguments="InterfaceIPSettings" />
            <testStep testStepId="1" name="Enable_Manual_IPSettings"  action="externalFnCall"  >
                <resultGeneration useMethodTag="Enable_TR181_Parameter" >
                  <arguments useConfigFile="true" key="MANUAL_IPSETTINGS_PARAMETER"/>
                </resultGeneration>
            </testStep>
            <testStep testStepId="2" name="Get_Default_Interface" method="Get_Default_Interface" saveResult="true">
                <resultGeneration useMethodTag="network_get_default_interface" />
            </testStep>
            <testStep testStepId="3" name="Get_IP_Settings" method="Get_IP_Settings2">
                <params>
                     <param tag="interface"  usePreviousResult="true" Id="2" useMethodTag="network_get_default_interface_name" />
                     <param tag="ipversion" value="IPv4" />
                </params>
                <resultGeneration useMethodTag="network_get_ip_settings" arguments="validate_ip_address" >
                    <expectedValues  usePreviousResult="true" Id="2" useMethodTag="network_get_default_interface_name" />
                </resultGeneration>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_18" testCaseName="Network_Validate_Public_IP_Adddress" desc="Validates the Public IP Address" >
            <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="Get_Public_IP_Address" action="externalFnCall" saveResult="true">
                <resultGeneration useMethodTag="system_check_public_ip_address" />
            </testStep>
            <testStep testStepId="2" name="Set_Stun_End_Point" method="Set_Stun_End_Point" >
                <params>
                    <param tag="server" useConfigFile="true" key="NETWORK_STUN_SERVER"/>
                    <param tag="port"  useConfigFile="true" key="NETWORK_STUN_SERVER_PORT"/>
                    <param tag="sync"  value="true" />
                    <param tag="timeout" value="30" />
                    <param tag="cache_timeout" value="0" />
                </params>
                <resultGeneration useMethodTag="network_check_results" />
            </testStep>
            <testStep testStepId="3" name="Get_Public_IP" method="Get_Public_IP">
                <params>
                     <param tag="iface"  value="ETHERNET" />
                     <param tag="ipv6" value="false" />
                </params>
                <resultGeneration useMethodTag="network_validate_public_ip_address" >
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="system_get_device_details" arguments="get_public_ip_address"/>
                </resultGeneration>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_19" testCaseName="Network_Check_WIFI_Interface_Status_Persist" desc="check whether wifi interface enabled status persist after reboot" >
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" saveResult="true" revertGet="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" revertSet="yes">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" revertParam="yes" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="System_reboot" method="Reboot" rebootStep="yes" pluginName="System">
                  <resultGeneration useMethodTag="system_check_set_operation"  />
            </testStep>
            <testStep testStepId="4" name="Is_WIFI_Interface_Enabled" method="Is_Interface_Enabled" revertFlag="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                </params>
                <resultGeneration useMethodTag="network_get_interface_status">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="network_toggle_interface_status" />
                </resultGeneration>
            </testStep>
       </testCase>
       <testCase testCaseId="NW_20" testCaseName="Network_Check_Wifi_Interface_State" desc="checks for the Wifi interface status" >
           <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="Get_Interfaces" method="Get_Interfaces" >
                <resultGeneration useMethodTag="network_get_interface_info" arguments="check_interfaces_state" expectedValues="true,false"/>
            </testStep>
            <testStep testStepId="2" pluginName="Wifi" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled"  >
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="4" pluginName="Wifi"  name="Connect" method="Connect" delay="5">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" pluginName="Wifi" name="Get_Connected_SSID" method="Get_Connect_SSID" delay="8"  >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="6" name="Get_Interfaces" method="Get_Interfaces" >
                <resultGeneration useMethodTag="network_get_interface_info" arguments="check_interfaces_state" expectedValues="true,true"/>
            </testStep>
            <testStep testStepId="7" pluginName="Wifi" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="8" name="Get_Interfaces" method="Get_Interfaces" >
                <resultGeneration useMethodTag="network_get_interface_info" arguments="check_interfaces_state" expectedValues="true,false"/>
            </testStep>
       </testCase>
</testPlugin>

