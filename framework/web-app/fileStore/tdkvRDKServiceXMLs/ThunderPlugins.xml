<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<thunderPlugins>

    <!-- Controller Plugin Information -->
    <plugin pluginName="Controller" serviceName="Controller" serviceVersion="1" >
        <method name="Get_Plugin_Status" api="status"  type="property" desc="Provides the information about plugins" >
            <expectedValues>activated,deactivated,suspended,resumed</expectedValues>
        </method>
        <method name="Activate_Plugin" api="activate" type="method" desc="Activates a plugin" >
            <params>
                <param tag="callsign" defaultValue="null"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Deactivate_Plugin" api="deactivate" type="method" desc="deactivates a plugin" >
            <params>
                <param tag="callsign" defaultValue="null"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Start_Discovery" api="startdiscovery" type="method" desc="Starts the network discovery" >
            <params>
                <param tag="ttl" defaultValue="0" type="int"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Discovery_Results" api="discoveryresults" type="method" desc="Gives discovery results"/>
        <method name="Subsystems_Status" api="subsystems" type="property" desc="Provides access to the status of the subsystems" >
            <expectedValues>Platform,Network,Security,Identifier,Internet,Location,Time,Provisioning,Decryption,Graphics,WebSource,Streaming</expectedValues>
        </method>
        <method name="Process_Info" api="processinfo" type="property" desc="Gives information about the framework process"/>
        <method name="Environment_Variable" api="environment" type="property" desc="Gives value of an environment variable"/>
        <method name="Get_Active_Connections_Info" api="links" type="property" desc="Gives information about active connections" >
            <expectedValues>WebServer,WebSocket,RawSocket,Closed,Suspended</expectedValues>
        </method>
        <method name="Store_Configuration" api="storeconfig" type="method" desc="Saves the current configuration">
            <expectedValues>null</expectedValues>
        </method>
        <method name="Delete_Directory_Contents" api="delete" type="method" desc="Removes contents of a directory from the persistent storage">
            <expectedValues>null</expectedValues>
        </method>
        <method name="Configuration" api="configuration" type="property" desc="Provides access to the configuration object of a service">
            <expectedValues>null</expectedValues>
        </method>
    </plugin>


    <!-- DeviceInfo Plugin Information -->
    <plugin pluginName="DeviceInfo" serviceName="DeviceInfo" serviceVersion="1">
        <method name="Get_System_Info" api="systeminfo" type="property" desc="System general information"/>
        <method name="Get_Network_Interfaces" api="addresses" type="property" desc="Network interface addresses"/>
        <method name="Get_Socket_Info" api="socketinfo" type="property" desc="Socket information"/>
    </plugin>


    <!-- LocationSync Plugin Information -->
    <plugin pluginName="LocationSync" serviceName="LocationSync" serviceVersion="1">
        <method name="Sync_Location" api="sync" type="method" desc="Synchronizes the location">
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Location_Info" api="location" type="property" desc="Location information"/>
    </plugin>



    <!-- TraceControl Plugin Information -->
    <plugin pluginName="TraceControl" serviceName="TraceControl" serviceVersion="1">
        <!-- TraceControl.1.status -->
        <method name="Get_Trace_Status" api="status" type="method" desc="Retrieves actual trace status information">
            <params>
                <param tag="module"   defaultValue="null"/>
                <param tag="category" defaultValue="Information"/>
            </params>
            <expectedValues>enabled,disabled</expectedValues>
        </method>

        <!-- TraceControl.1.set -->
        <method name="Set_Trace_Status" api="set" type="method" desc="Sets traces">
            <params>
                <param tag="module"   defaultValue="null"/>
                <param tag="category" defaultValue="Information"/>
                <param tag="state"    defaultValue="enabled"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
    </plugin>


    <!-- OCDM Plugin Information -->
    <plugin pluginName="OCDM" serviceName="OCDM" serviceVersion="1">
        <method name="Get_Supported_DRM_Systems" api="drms" type="property" desc="Retrieves supported DRM systems"/>
        <method name="Get_DRM_Key_Systems" api="keysystems" type="property" desc="Provides access to the DRM key systems">
            <params>
                <param tag="drm" defaultValue="null"/>
            </params>
        </method>
    </plugin>



    <!-- Network Plugin Information -->
    <plugin pluginName="Network" serviceName="org.rdk.Network" serviceVersion="1">
        <method name="Get_Interfaces" api="getInterfaces" type="method" desc="Gives suported interfaces and their states"/>
        <method name="Is_Interface_Enabled" api="isInterfaceEnabled" type="method" desc="Gives specific interface state">
            <params>
                <param tag="interface" defaultValue="null"/>
            </params>
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Interface_Enabled" api="setInterfaceEnabled" type="method" desc="Sets specific interface state">
            <params>
                <param tag="interface" defaultValue="null"/>
                <param tag="enabled"   defaultValue="true" type="bool"/>
                <param tag="persist"   defaultValue="true" type="bool"/>
            </params>
        </method>
        <method name="Get_Default_Interface" api="getDefaultInterface" type="method" desc="Gets the default network interface"/>
        <method name="Set_Default_Interface" api="setDefaultInterface" type="method" desc="Sets the default interface">
            <params>
                <param tag="interface"  defaultValue="null" />
                <param tag="persist"   defaultValue="true" type="bool"/>
            </params>
        </method>
        <method name="Get_STB_IP" api="getStbIp" type="method" desc="Gets the IP address of the default interface"/>
        <method name="Ping" api="ping" type="method" desc="Pings the specified endpoint">
            <params>
                <param tag="endpoint"  defaultValue="null" />
                <param tag="packets"   defaultValue="15" type="int"/>
            </params>
            <expectedValues>15</expectedValues>
        </method>
        <method name="Ping_NamedEndpoint" api="pingNamedEndpoint" type="method" desc="Pings the endpoint named by endpointName">
            <params>
                <param tag="endpointName"  defaultValue="null" />
                <param tag="packets"   defaultValue="15" type="int"/>
            </params>
            <expectedValues>15</expectedValues>
        </method>
        <method name="Trace" api="trace" type="method" desc="Traces the specified endpoint">
            <params>
                <param tag="endpoint"  defaultValue="null" />
                <param tag="packets"   defaultValue="15" type="int"/>
            </params>
        </method>
        <method name="Trace_NamedEndpoint" api="traceNamedEndpoint" type="method" desc="Traces the endpoint named by endpointName">
            <params>
                <param tag="endpointName"  defaultValue="null" />
                <param tag="packets"   defaultValue="15" type="int"/>
                <param tag="guid"   defaultValue="iasoviubejcv"/>
            </params>
        </method>
        <method name="Get_NamedEndPoints" api="getNamedEndpoints" type="method" desc="Returns a list of endpoint names"/>
        <method name="Get_IP_Settings" api="getIPSettings" type="method" desc="Gets the IP setting for the given interface">
            <params>
                <param tag="interface"  defaultValue="null" />
            </params>
        </method>
        <method name="Set_IP_Settings" api="setIPSettings" type="method" desc="Sets the IP settings">
            <params>
                <param tag="interface "   defaultValue="null" />
                <param tag="ipversion"    defaultValue="null"/>
                <param tag="autoconfig"   defaultValue="null"/>
                <param tag="ipaddr"       defaultValue="null"/>
                <param tag="netmask"      defaultValue="null"/>
                <param tag="gateway"      defaultValue="null"/>
                <param tag="primarydns"   defaultValue="null"/>
                <param tag="secondarydns" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Connectivity_Test_Endpoints" api="setConnectivityTestEndpoints" type="method" desc="sets the list of endpoints">
            <params>
                <param tag="endpoints"  defaultValue="null" type="list"/>
            </params>
        </method>
        <method name="Is_ConnectedTo_Internet" api="isConnectedToInternet" type="method" desc="Checks internet connectivity"/>

        <event name="Event_Interface_Status_Changed" eventName="onInterfaceStatusChanged" eventId="client.events.1" type="event" desc="Interface status changed  event" />
        <event name="Event_Connection_Status_Changed" eventName="onConnectionStatusChanged" eventId="client.events.1" type="event" desc="Connection status changed event" />
        <event name="Event_IPAddress_Status_Changed" eventName="onIPAddressStatusChanged" eventId="client.events.1" type="event" desc="IPAddress status changed event" />
    </plugin>


    <!-- Front Panel Plugin Information -->
    <plugin pluginName="FrontPanel" serviceName="org.rdk.FrontPanel" serviceVersion="1">
        <method name="Get_All_FP_LEDs" api="getFrontPanelLights" type="method" desc="Gets Front Panel LEDs"/>
        <method name="Get_FP_Brightness" api="getBrightness" type="method" desc="Get Brightness of the Front Panel"/>
        <method name="Set_FP_Brightness" api="setBrightness" type="method" desc="Set Brightness of the Front Panel all indicators"/>
        <method name="Get_LED_Brightness" api="getBrightness" type="method" desc="Get Brightness of the specified LED">
            <params>
                <param tag="index"  defaultValue="null" />
            </params>
        </method>
        <method name="Set_LED_Brightness" api="setBrightness" type="method" desc="Set Brightness of the specified LED">
            <params>
                <param tag="index"       defaultValue="null" />
                <param tag="brightness"  defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Power_LED_ON" api="powerLedOn" type="method" desc="Turn on LED indicator">
            <params>
                <param tag="index"  defaultValue="null" />
            </params>
        </method>
        <method name="Power_LED_OFF" api="powerLedOff" type="method" desc="Turn off LED indicator">
            <params>
                <param tag="index"  defaultValue="null" />
            </params>
        </method>
        <method name="Get_Clock_Brightness" api="getClockBrightness" type="method" desc="Gives current clock brightness"/>
        <method name="Set_Clock_Brightness" api="setClockBrightness" type="method" desc="Set clock brightness">
            <params>
                <param tag="brightness"  defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Set_LED_Blink" api="setBlink" type="method" desc="Set LED blinking pattern">
            <params>
                <param tag="ledIndicator"  defaultValue="null" />
                <param tag="iteration"  defaultValue="null" />
                <param tag="brightness_levels"  defaultValue="1,100" type="int" />
                <param tag="duration"  defaultValue="5000" type="int" />
                <param tag="color"  defaultValue="null"  />
                <param tag="red"   defaultValue="0" type="int" />
                <param tag="blue"  defaultValue="0" type="int" />
                <param tag="green" defaultValue="0" type="int" />
            </params>
        </method>
        <method name="Is_24_Hour_Clock" api="is24HourClock" type="method" desc="Get clock version (12 vs 24 hour)">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_24_Hour_Clock" api="set24HourClock" type="method" desc="Set between 12/24 hour clock">
            <params>
                <param tag="is24Hour"  defaultValue="true" type="bool"/>
            </params>
        </method>
        <method name="Set_Clock_Pattern" api="setClockTestPattern" type="method" desc="Allows to set test pattern on the STB clock">
            <params>
                <param tag="show"  defaultValue="true" type="bool"/>
                <param tag="timerInterval"  defaultValue="4" type="int"/>
            </params>
        </method>

    </plugin>


    <!-- WebKit browser Plugin Information -->
    <plugin pluginName="WebKitBrowser" serviceName="WebKitBrowser" serviceVersion="1">
        <method name="Get_WebKitBrowser_State" api="state" type="method" desc="Gives running state of the service">
            <expectedValues>resumed,suspended</expectedValues>
        </method>
        <method name="Set_WebKitBrowser_State" api="state" type="method" desc="Set service state">
            <params paramType="directString" >
                <param tag="state" defaultValue="resumed"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Browser_FPS" api="fps" type="property" desc="Gets No of frames per second the browser is rendering" />
        <method name="Get_Browser_Visibility" api="visibility" type="property" desc="Gets current browser visibility">
            <expectedValues>visible,hidden</expectedValues>
        </method>
        <method name="Set_Browser_Visibility" api="visibility" type="property" desc="Sets current browser visibility" >
            <params paramType="directString" >
                <param tag="visibility" defaultValue="visible"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Browser_URL" api="url" type="property" desc="Gets browser load URL" />
        <method name="Set_Browser_URL" api="url" type="property" desc="Sets browser load URL" >
            <params paramType="directString" >
                <param tag="url" defaultValue="null"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Cookie_Accept_Policy" api="httpcookieacceptpolicy" type="property" desc="Gets http cookie accept policy">
            <expectedValues>always,never,onlyfrommaindocumentdomain,exclusivelyfrommaindocumentdomain</expectedValues>
        </method>
        <method name="Set_Cookie_Accept_Policy" api="httpcookieacceptpolicy" type="property" desc="Sets http cookie accept policy" >
            <params paramType="directString" >
                <param tag="cookie_accept_policy" defaultValue="always"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Local_Storage_Availability"  api="localstorageenabled" type="method" desc="Gives local storage availability">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Local_Storage_Availability"  api="localstorageenabled" type="method" desc="Sets local storage availability " >
            <params paramType="directBool">
                <param tag="enabled" defaultValue="null" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Languages"  api="languages" type="method" desc="Gives user preferred languages">
            <expectedValues>en,en-US</expectedValues>
        </method>
        <method name="Set_Languages"  api="languages" type="method" desc="Sets user preferred languages" >
            <params paramType="directList">
                <param tag="languages" defaultValue="en,en-US" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_UserAgent"  api="useragent" type="method" desc="Gets userAgent string used by browser" />
        <method name="Set_UserAgent"  api="useragent" type="method" desc="Sets userAgent string used by browser" >
            <params paramType="directString">
                <param tag="useragent" defaultValue="null" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Headers"  api="headers" type="method" desc="Gets browser headers to send on all requests" />
        <method name="Set_Headers"  api="headers" type="method" desc="Sets browser headers to send on all requests" >
            <params paramType="userGenerate" useMethodTag="webkitbrowser_get_header_params" >
                <param tag="name" defaultValue="null" />
                <param tag="value" defaultValue="null" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <event name="Event_Load_Finished" eventName="loadfinished" eventId="client.events.1" type="event" desc="URL loaded event" >
            <expectedValues>200</expectedValues>
        </event>
        <event name="Event_Load_Failed" eventName="loadfailed" eventId="client.events.1" type="event" desc="URL load failed event" />
        <event name="Event_URL_Change" eventName="urlchange" eventId="client.events.1" type="event" desc="URL Change event" />
        <event name="Event_Visibility_Change" eventName="visibilitychange" eventId="client.events.1" type="event" desc="Visibility Change event"/>
        <event name="Event_Page_Closure" eventName="pageclosure" eventId="client.events.1" type="event" desc="Web page close event">
            <expectedValues>null</expectedValues>
        </event>
        <event name="Event_State_Change" eventName="statechange" eventId="client.events.1" type="event" desc="Service state change event" />
    </plugin>

    <!-- System Plugin Information -->
    <plugin pluginName="System" serviceName="org.rdk.System" serviceVersion="1">
        <method name="Get_Device_Info" api="getDeviceInfo" type="method" desc="Gives device details"/>
        <method name="Get_Serial_No"  api="getSerialNumber" type="method" desc="Gives device serial number"/>
        <method name="Get_System_Version"  api="getSystemVersions" type="method" desc="Gives system version details"/>
        <method name="Get_System_Uptime"  api="requestSystemUptime" type="method" desc="Gives system uptime"/>
        <method name="Get_Core_Temperature"  api="getCoreTemperature" type="method" desc="Gives core temperature of the device"/>
        <method name="Get_Milestones"  api="getMilestones" type="method" desc="Gives list of milestones"/>
        <method name="Get_XConf_Params"  api="getXconfParams" type="method" desc="Gives Xconf configuration of the device"/>
        <method name="Get_RFC_Config" api="getRFCConfig" type="method" desc="Gets RFC configurations" >
            <params>
                <param tag="rfcList" defaultValue="null" type="list" />
            </params>
        </method>
        <method name="Get_GZ_Enable_Status"  api="isGzEnabled" type="method" desc="Gives GZ enabled status">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_GZ_Enable_Status"  api="setGzEnabled" type="method" desc="Sets GZ enabled status " >
            <params>
                <param tag="enabled" defaultValue="null" type="bool" />
            </params>
        </method>
        <method name="Get_Temperature_Thresholds" api="getTemperatureThresholds" type="method" desc="Gets temperature thresholds" />
        <method name="Set_Temperature_Thresholds" api="setTemperatureThresholds" type="method" desc="Sets temperature thresholds">
            <params paramKey="thresholds" paramType="userGenerate" useMethodTag="system_set_thresholds_params">
                <param tag="WARN" defaultValue="null" />
                <param tag="MAX"  defaultValue="null" />
            </params>
        </method>
        <method name="Cache_Contains" api="cacheContains" type="method" desc="Checks if key is present in cache" >
            <params>
                <param tag="key" defaultValue="sampleKey" />
            </params>
        </method>
        <method name="Get_Cache_Value" api="getCachedValue" type="method" desc="Get value of the key in cache" >
            <params>
                <param tag="key" defaultValue="sampleKey" />
            </params>
            <expectedValues>sampleKey,100.23</expectedValues>
        </method>
        <method name="Set_Cache_Value" api="setCachedValue" type="method" desc="Set value of the key in cache" >
            <params>
                <param tag="key"   defaultValue="sampleKey" />
                <param tag="value" defaultValue="100.23" type="float" />
            </params>
        </method>
        <method name="Remove_Cache_Key" api="removeCacheKey" type="method" desc="Remove key from cache" >
            <params>
                <param tag="key" defaultValue="sampleKey" />
            </params>
        </method>
        <method name="Get_State_Info" api="getStateInfo" type="method" desc="Query device state information of various properties" >
            <params>
                <param tag="param" defaultValue="null" />
            </params>
        </method>
        <method name="Get_TimeZone_DST" api="getTimeZoneDST" type="method" desc="Get configured time zone" />
        <method name="Set_TimeZone_DST" api="setTimeZoneDST" type="method" desc="Set configured time zone" >
            <params>
                <param tag="timeZone" defaultValue="UTC-5" />
            </params>
        </method>
        <method name="Get_Available_StandBy_Modes" api="getAvailableStandbyModes" type="method" desc="Get available standby modes" />
        <method name="Get_Preferred_StandBy_Mode" api="getPreferredStandbyMode" type="method" desc="Get preferred standby mode" >
            <expectedValues>LIGHT_SLEEP,DEEP_SLEEP</expectedValues>
        </method>
        <method name="Set_Preferred_StandBy_Mode" api="setPreferredStandbyMode" type="method" desc="Set preferred standby mode" >
            <params>
                <param tag="standbyMode" defaultValue="null" />
            </params>
        </method>
        <method name="Get_Mode" api="getMode" type="method" desc="Gets currently set mode" >
                <expectedValues>NORMAL,EAS,WAREHOUSE</expectedValues>
        </method>
        <method name="Set_Mode" api="setMode" type="method" desc="Set mode for specific duration">
            <params paramKey="modeInfo">
                <param tag="mode" defaultValue="NORMAL" />
                <param tag="duration" defaultValue="10" type="int" />
            </params>
        </method>
        <method name="Get_Power_State" api="getPowerState" type="method" desc="Get power state" >
            <expectedValues>STANDBY,DEEP_SLEEP,LIGHT_SLEEP,ON</expectedValues>
        </method>
        <method name="Set_Power_State" api="setPowerState" type="method" desc="Set power state">
            <params>
                <param tag="powerState"    defaultValue="STANDBY" />
                <param tag="standbyReason" defaultValue="APIUnitTest" />
            </params>
        </method>
        <method name="Has_Reboot_BeenRequested" api="hasRebootBeenRequested" type="method" desc="Check whether a reboot has been requested." >
            <expectedValues>true,false</expectedValues>
        </method>
        <method name="Query_MocaStatus" api="queryMocaStatus" type="method" desc="Check whether Moca is enabled" >
            <expectedValues>true,false</expectedValues>
        </method>
        <method name="Clear_Last_DeepSleep_Reason" api="clearLastDeepSleepReason" type="method" desc="Clear the last deep sleep reason." />
        <method name="Get_Last_DeepSleep_Reason" api="getLastDeepSleepReason" type="method" desc="Retrieve the last deep sleep reason." />
        <method name="Get_PreviousReboot_Info" api="getPreviousRebootInfo" type="method" desc="Retrieve basic information about a reboot" />
        <method name="Get_PreviousReboot_Info2" api="getPreviousRebootInfo2" type="method" desc="Retrieve detailed information about a reboot" />
        <method name="Get_PreviousReboot_Reason" api="getPreviousRebootReason" type="method" desc="Retrieve the last reboot reason." />

        <method name="Get_MacAddress" api="getMacAddresses" type="method" desc="Retrieve the mac addresses." >
            <params>
                <param tag="GUID" defaultValue="61734787891723481" type="int" />
            </params>

            <expectedValues>true,false</expectedValues>
        </method>
        <method name="Reboot" api="reboot" type="method" desc="system perform a reboot of the set-top box" />
        <method name="Get_Power_State_Before_Reboot" api="getPowerStateBeforeReboot" type="method" desc="Gets the power state before reboot" />
        <event name="Event_MacAddresses_Retreived" eventName="onMacAddressesRetreived" eventId="client.events.1" type="event" desc="MacAddressesRetreived" />
        <event name="Event_PowerState_Changed" eventName="onSystemPowerStateChanged" eventId="client.events.1" type="event" desc="power state changed event" />

    </plugin>


    <!-- Cobalt Plugin Information -->
    <plugin pluginName="Cobalt" serviceName="Cobalt" serviceVersion="1">
        <method name="Get_Cobalt_State" api="state" type="method" desc="Gives running state of the service">
            <expectedValues>resumed,suspended</expectedValues>
        </method>
        <method name="Set_Cobalt_State" api="state" type="method" desc="Set service state">
            <params paramType="directString" >
                <param tag="state" defaultValue="resumed"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Send_DeepLink" api="deeplink" type="method" desc="Send a deep link to the application" >
            <params paramType="directString" >
                <param tag="link" defaultValue="null"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
    </plugin>


    <!-- DeviceDiagnostics Plugin Information -->
    <plugin pluginName="DeviceDiagnostics" serviceName="org.rdk.DeviceDiagnostics" serviceVersion="1">
        <method name="Get_Configuration" api="getConfiguration" type="method" desc="RDK API interface for the WebPA service" >
            <params>
                <param tag="names" defaultValue="null" type="list" />
            </params>
        </method>
    </plugin>

    <!-- HDCP Profile Plugin Information -->
    <plugin pluginName="HDCPProfile" serviceName="org.rdk.HdcpProfile" serviceVersion="1">
        <method name="Get_HDCP_Status" api="getHDCPStatus" type="method" desc="Provides interface for HDCP related data and events"/>
        <method name="Get_STB_Supported_HDCP_Version" api="getSettopHDCPSupport" type="method" desc="Returns which version of HDCP is supported by the STB"/>
    </plugin>


    <!-- User Preferences Plugin Information -->
    <plugin pluginName="UserPreferences" serviceName="org.rdk.UserPreferences" serviceVersion="1">
        <method name="Get_UI_Language" api="getUILanguage" type="method" desc="Gets the user preferred UI language" />
        <method name="Set_UI_Language" api="setUILanguage" type="method" desc="Sets the user preferred UI language" >
            <params>
                <param tag="ui_language" defaultValue="null" />
            </params>
        </method>
    </plugin>


    <!-- RDK Shell Plugin Information -->
    <plugin pluginName="RDKShell" serviceName="org.rdk.RDKShell" serviceVersion="1">
        <method name="MoveToFront" api="moveToFront" type="method" desc="Moves the client to the front or top of the Z order" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="MoveToBack" api="moveToBack" type="method" desc="Moves the client to the back or bottom of the Z order" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="MoveBehind" api="moveBehind" type="method" desc="Moves the client behind the specified target" >
            <params>
                <param tag="client" defaultValue="null"/>
                <param tag="target" defaultValue="null"/>
            </params>
        </method>

        <method name="SetFocus" api="setFocus" type="method" desc="Sets focus to the specified client" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="Kill" api="kill" type="method" desc="Kills the client" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="AddKeyIntercept" api="addKeyIntercept" type="method" desc="Adds a key intercept to the client application specified" >
            <params>
                <param tag="keyCode" defaultValue="10" type="int"/>
                <param tag="modifiers" defaultValue="alt,shift" type="list" />
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="RemoveKeyIntercept" api="removeKeyIntercept" type="method" desc="Removes the key intercept" >
            <params>
                <param tag="keyCode" defaultValue="10" type="int" />
                <param tag="modifiers" defaultValue="alt,shift" type="list" />
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="GetScreenResolution" api="getScreenResolution" type="method" desc="Gets the screen resolution" />

        <method name="SetScreenResolution" api="setScreenResolution" type="method" desc="Sets the screen resolution" >
            <params>
                <param tag="w" defaultValue="1080" type="int"/>
                <param tag="h" defaultValue="720" type="int" />
            </params>
        </method>

        <method name="GetClients" api="getClients" type="method" desc="Gets a list of clients" />

        <method name="GetZOrder" api="getZOrder" type="method" desc="Returns an array of clients in Z order, starting with the top most application client first"/>

        <method name="GetBounds" api="getBounds" type="method" desc="Gets the bounds of the specified client" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="SetBounds" api="setBounds" type="method" desc="Sets the bounds of the specified client" >
            <params>
                <param tag="x" defaultValue="0" type="int" />
                <param tag="y" defaultValue="0" type="int" />
                <param tag="w" defaultValue="750" type="int" />
                <param tag="h" defaultValue="450" type="int" />
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="GetVisibility" api="getVisibility" type="method" desc="Gets the visibility of the specified client" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="SetVisibility" api="setVisibility" type="method" desc="Sets the visibility of the specified client" >
            <params>
                <param tag="client" defaultValue="null"/>
                <param tag="visible" defaultValue="true" type="bool" />
            </params>
        </method>

        <method name="GetOpacity" api="getOpacity" type="method" desc="gets the opacity of the specified client" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="SetOpacity" api="setOpacity" type="method" desc="Sets the opacity of the given client" >
            <params>
                <param tag="client" defaultValue="null"/>
                <param tag="opacity" defaultValue="100" type="int" />
            </params>
        </method>

        <method name="AddKeyListener" api="addKeyListener" type="method" desc="Adds a key listener to an app.  The keys are bubbled up based on their z-order" >
            <params>
                <param tag="keys" defaultValue="null"/>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="RemoveKeyListener" api="removeKeyListener" type="method" desc="Removes a key listener for an app" >
            <params>
                <param tag="keys" defaultValue="null"/>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="SetScale" api="setScale" type="method" desc="Set Scale Params to an application" >
            <params>
                <param tag="client" defaultValue="null"/>
                <param tag="sx" defaultValue="1" type="float" />
                <param tag="sy" defaultValue="1" type="float" />
            </params>
        </method>

        <method name="GetScale" api="getScale" type="method" desc="Get Scale Params to an application" >
            <params>
                <param tag="client" defaultValue="null"/>
            </params>
        </method>

        <method name="GenerateKey" api="generateKey" type="method" desc="Triggers key events like key press and release" >
            <params paramKey="keys" paramType="userGenerate" useMethodTag="rdkshell_set_keys_params">
                <param tag="keyCode" defaultValue="0" type="int" />
                <param tag="modifiers" defaultValue="" type="list" />
                <param tag="delay" defaultValue="0.0" type="float"/>
            </params>
        </method>


        <method name="LaunchApplication" api="launch" type="method" desc="Launches an application" >
            <params>
                <param tag="callsign"  />
                <param tag="type" defaultValue="HtmlApp" />
                <param tag="uri" defaultValue="null" />
                <param tag="x" defaultValue="0" type="int" />
                <param tag="y" defaultValue="0" type="int" />
                <param tag="w" defaultValue="0" type="int" />
                <param tag="h" defaultValue="0" type="int" />
            </params>
        </method>

        <method name="SuspendApplication" api="suspend" type="method" desc="Suspend an application" >
            <params>
                <param tag="callsign" defaultValue="null"/>
            </params>
        </method>
       
        <method name="DestroyApplication" api="destroy" type="method" desc="Destroys the applications" >
            <params>
                <param tag="callsign" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Available_Types" api="getAvailableTypes" type="method" desc="Gets the available types" />
        <method name="Get_Application_State" api="getState" type="method" desc="Gets the state of the applications" />
        <method name="Get_System_Resource_Info" api="getSystemResourceInfo" type="method" desc="Gets system resource information" />
        <method name="Add_Animation" api="addAnimation" type="method" desc="Performs a set of animations">
            <params paramKey="animations"  paramType="userGenerate" useMethodTag="rdkshell_set_animations_params">
                <param tag="client"  />
                <param tag="x" defaultValue="0" type="int" />
                <param tag="y" defaultValue="0" type="int" />
                <param tag="w" defaultValue="0" type="int" />
                <param tag="h" defaultValue="0" type="int" />
                <param tag="sx" defaultValue="0.0" type="float" />
                <param tag="sy" defaultValue="0.0" type="float" />
                <param tag="tween" />
                <param tag="duration" defaultValue="0" type="int" />
            </params>
        </method>
        <method name="Enable_Inactivity_Reporting" api="enableInactivityReporting" type="method" desc="Enables inactivity reporting" >
            <params>
                <param tag="enable" type="bool"/>
            </params>
        </method>
        <method name="Set_Inactivity_Interval" api="setInactivityInterval" type="method" desc="Sets inactivity interval" >
            <params>
                <param tag="interval" type="int"/>
            </params>
        </method>

        <event name="Event_On_Launched" eventName="onLaunched" eventId="client.events.1" type="event" desc="Fired on launching the client" />
        <event name="Event_On_Suspended" eventName="onSuspended" eventId="client.events.1" type="event" desc="Fired on Suspending the client" />
        <event name="Event_On_Destroyed" eventName="onDestroyed" eventId="client.events.1" type="event" desc="Fired on destroying the client"/>
        <event name="Event_On_UserInactivity" eventName="onUserInactivity" eventId="client.events.1" type="event" desc="Fired on user inactive"/>
    </plugin>


    <!-- DisplayInfo Plugin Information -->
    <plugin pluginName="DisplayInfo" serviceName="DisplayInfo" serviceVersion="1">
        <method name="DisplayInfo_GetEDID" api="edid" type="method" desc="Provides TV's Extended Display Identification Data" >
                <params>
                        <param tag="length" defaultValue="null" type="int"/>
                </params>
        </method>
        <method name="DisplayInfo_Isaudiopassthrough" api="isaudiopassthrough" type="property" desc="Read isaudioPassthrough property on HDMI." >
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="DisplayInfo_Isconnected" api="connected" type="property" desc="Check for display isconnected">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="DisplayInfo_GetWidth" api="width" type="property" desc="Provides horizontal resolution of TV."/>
        <method name="DisplayInfo_GetHeight" api="height" type="property" desc="Provide vertical resolution of TV."/>
        <method name="DisplayInfo_Getverticalfreq" api="verticalfreq" type="property" desc="Get Vertical Frequency"/>
        <method name="DisplayInfo_GetHDCPversion" api="hdcpprotection" type="property" desc="Get HDCP Version" >
            <expectedValues>HdcpUnencrypted,Hdcp1X,Hdcp2X</expectedValues>
        </method>
        <method name="DisplayInfo_GetPortname" api="portname" type="property" desc="Get Video output port on the STB used for connection to TV"/>
        <method name="DisplayInfo_GetHDRFormatsTV" api="tvcapabilities" type="property" desc="Gets HDR formats supported by TV" >
            <expectedValues>HdrOff,Hdr10,Hdr10Plus,HdrHlg,HdrDolbyvision,HdrTechnicolor</expectedValues>
        </method>
        <method name="DisplayInfo_GetHDRFormatsSTB" api="stbcapabilities" type="property" desc="Gets HDR formats supported by STB" >
            <expectedValues>HdrOff,Hdr10,Hdr10Plus,HdrHlg,HdrDolbyvision,HdrTechnicolor</expectedValues>
        </method>
        <method name="DisplayInfo_GetHDRFormatInUse" api="hdrsetting" type="property" desc="Gets HDR format in use" >
            <expectedValues>HdrOff,Hdr10,Hdr10Plus,HdrHlg,HdrDolbyvision,HdrTechnicolor</expectedValues>
        </method>
    </plugin>


    <!-- ActivityMonitor Plugin Information -->
    <plugin pluginName="ActivityMonitor" serviceName="org.rdk.ActivityMonitor" serviceVersion="1">
        <method name="EnableMonitoring" api="enableMonitoring" type="method" desc="Enables monitoring for the given application PIDs with the given thresholds for memory and CPU usage at frequencies specified by the intervals"/>
        <!-- Nested input params needed for enableMonitoring method. This will be covered later -->
        <method name="DisableMonitoring" api="disableMonitoring" type="method" desc="Disables monitoring"/>
        <method name="GetApplicationMemoryUsage" api="getApplicationMemoryUsage" type="method" desc="Returns memory usage by this application">
            <params>
                <param tag="pid" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="GetAllMemoryUsage" api="getAllMemoryUsage" type="method" desc="Returns memory used by all applications"/>
    </plugin>


    <!-- HdmiCec Plugin Information -->
    <plugin pluginName="HdmiCec" serviceName="org.rdk.HdmiCec" serviceVersion="1">
        <method name="GetEnabled" api="getEnabled" type="method" desc="Returns if CEC is enabled.">
        <expectedValues>True,False</expectedValues>
        </method>
        <method name="GetCECAddresses" api="getCECAddresses" type="method" desc="return the JSON object CECAddresses that is assigned to the local device."/>
        <method name="SetEnabled" api="setEnabled" type="method" desc="Enables or disables CEC.">
            <params>
                <param tag="enabled" defaultValue="null" type="bool" />
            </params>
        </method>
        <method name="SendMessage" api="sendMessage" type="method" desc="writes CEC frame to the driver">
            <params>
                <param tag="message" defaultValue="null" />
            </params>
        </method>
        <event name="Event_On_Message" eventName="onMessage" eventId="client.events.1" type="event" desc="Fired when a message is sent from an HDMI device" />
    </plugin>


    <!-- StateObserver Plugin Information -->
    <plugin pluginName="StateObserver" serviceName="com.comcast.StateObserver" serviceVersion="1">
        <method name="GetValues" api="getValues" type="method" desc="This API takes a property or an array of properties as input and returns the values and errors of the same" >
            <params>
                <param tag="PropertyNames" defaultValue="null" type="list" />
            </params>
        </method>
        <method name="RegisterListeners" api="registerListeners" type="method" desc="This API is used to register listeners to  properties so that any value change occurring in these registered properties will be notified" >
            <params>
                <param tag="PropertyNames" defaultValue="null" type="list" />
            </params>
        </method>
        <method name="UnregisterListeners" api="unregisterListeners" type="method" desc="Unregisters the listeners allocated to the properties" >
            <params>
                <param tag="PropertyNames" defaultValue="null" type="list" />
            </params>
        </method>
        <method name="GetRegisteredPropertyNames" api="getRegisteredPropertyNames" type="method" desc="Returns an array of all properties, which has active listeners."/>
        <method name="GetApiVersionNumber" api="getApiVersionNumber" type="method" desc="This API is used to get the api verison number"/>
        <method name="SetApiVersionNumber" api="setApiVersionNumber" type="method" desc="This API is used to set the api verison number">
            <params>
                <param tag="version" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="GetName" api="getName" type="method" desc="This API is used to get the plugin name"/>
        <event name="Event_On_Property_Changed" eventName="propertyChanged" eventId="4f0a0e10-3667-44d2-a1b0-b671b8c119a3" type="event" desc="Fired whenever any device property's value changes" />
    </plugin>

    <!-- FrameRate Plugin Information -->
    <plugin pluginName="FrameRate" serviceName="org.rdk.FrameRate" serviceVersion="1">
        <method name="Set_Collection_Frequency" api="setCollectionFrequency" type="method" desc="Set amount of milliseconds per collection interval">
            <params>
                <param tag="frequencyInMs" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Collection_Frequency_Default" api="setCollectionFrequency" type="method" desc="Set 10 milliseconds per collection interval"/>
        <method name="Start_FPS_Collection" api="startFpsCollection" type="method" desc="Starts the fps collection"/>
        <method name="Stop_FPS_Collection"  api="stopFpsCollection"  type="method" desc="Stops the fps collection"/>
        <event name="Event_On_FPS" eventName="onFpsEvent" eventId="client.events.1" type="event" desc="Fired at given interval and after stopFpsCollection" />
    </plugin>


    <!-- WifiControl Plugin Information -->
    <plugin pluginName="Wifi" serviceName="org.rdk.Wifi" serviceVersion="1">
        <method name="Start_Scan" api="startScan" type="method" desc="Searches for available SSIDs">
            <params>
                <param tag="ssid" defaultValue="null"/>
                <param tag="incremental" defaultValue="true" type="bool" />
                <param tag="frequency" defaultValue="null"/>
            </params>
        </method>
        <method name="Stop_Scan" api="stopScan" type="method" desc="Stops scanning for SSIDs" />
        <method name="Connect" api="connect" type="method" desc="Attempts connection to SSID">
            <params>
                <param tag="ssid" defaultValue="null"/>
                <param tag="passphrase" defaultValue="null"/>
                <param tag="securityMode" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Disconnect" api="disconnect" type="method" desc="Disconnects from SSID"/>
        <method name="Get_Current_State" api="getCurrentState" type="method" desc="Gets WIFI state">
            <expectedValues>0,1,2,3,4,5,6</expectedValues>
        </method>
        <method name="Set_Enabled" api="setEnabled" type="method" desc="Enable or disable WIFI Adapter">
            <params>
                <param tag="enable" defaultValue="true" type="bool" />
            </params>
        </method>
        <method name="Get_Connect_SSID" api="getConnectedSSID" type="method" desc="Gives connected SSID information"/>
        <method name="Save_SSID_Info" api="saveSSID" type="method" desc="Saves ssid information">
            <params>
                <param tag="ssid" defaultValue="null"/>
                <param tag="passphrase" defaultValue="null"/>
                <param tag="securityMode" defaultValue="null" type="int" />
            </params>
            <expectedValues>0</expectedValues>
        </method>
        <method name="Clear_SSID_Info" api="clearSSID" type="property" desc="Clears saved SSID information">
            <expectedValues>0</expectedValues>
        </method>
        <method name="Set_Signal_Threshold_Change_Enabled" api="setSignalThresholdChangeEnabled" type="method" desc="Enables / disables signalThresholdChange events to be fired">
            <params>
                <param tag="enabled" defaultValue="null" type= "bool" />
                <param tag="interval" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Is_Signal_Threshold_Change_Enabled" api="isSignalThresholdChangeEnabled" type="method" desc="Returns true when threshold changes are enabled">
            <expectedValues>0,1</expectedValues>
        </method>
        <method name="Initiate_WPS_Pairing" api="initiateWPSPairing" type="method" desc="Initiates the connection via WPS" />
        <method name="Cancel_WPS_Pairing" api="cancelWPSPairing" type="method" desc="Cancels WPS pairing" />
        <method name="Is_Paired" api="isPaired" type="method" desc="Determines if the device paired to an SSID" />
        <method name="Get_Paired_SSID" api="getPairedSSID" type="method" desc="Returns the SSID the device is currently paired with" />
        <method name="Get_Paired_SSID_Info" api="getPairedSSIDInfo" type="method" desc="Returns the SSID the device is currently paired with also including the BSSID" />
        <event name="Event_On_WIFI_State_Changed" eventName="onWIFIStateChanged" eventId="client.events.1" type="event" desc="Indicates state change" />
        <event name="Event_On_Available_SSIDs" eventName="onAvailableSSIDs" eventId="client.events.1" type="event" desc="Gives SSID after scan" />
        <event name="Event_On_Error" eventName="onError" eventId="client.events.1" type="event" desc="Indicates unexpected Wifi error occurs" />
    </plugin>


    <!-- Bluetooth Plugin Information -->
    <plugin pluginName="Bluetooth" serviceName="org.rdk.Bluetooth" serviceVersion="1">
        <method name="Enable_Stack" api="enable" type="method" desc="Enables the Bluetooth stack"/>
        <method name="Disable_Stack" api="disable" type="method" desc="Disables the Bluetooth stack"/>
        <method name="Get_Name" api="getName" type="method" desc="Provides name of the device as seen by other Bluetooth devices"/>
        <method name="Set_Name" api="setName" type="method" desc="Sets the name of this device as seen by other Bluetooth devices"/>
        <method name="Is_Discoverable" api="isDiscoverable" type="method" desc="Provides discoverable status of the device">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Discoverable" api="setDiscoverable" type="method" desc="Sets the discoverable status of the device">
            <params>
                <param tag="discoverable" defaultValue="true" type="bool" />
                <param tag="timeout"      defaultValue="10" type="int" />
            </params>
        </method>
        <method name="Start_Scan" api="startScan" type="method" desc="Searches for available Bluetooth devices">
            <params>
                <param tag="timeout" defaultValue="30" type="int" />
                <param tag="profile" defaultValue="DEFAULT"/>
            </params>
        </method>
        <method name="Stop_Scan" api="stopScan" type="method" desc="Stops scanning for Bluetooth devices" />
        <method name="Get_Discovered_Devices" api="getDiscoveredDevices" type="method" desc="Gives discovered Bluetooth devices" />
        <method name="Connect" api="connect" type="method" desc="Connects to the given Bluetooth device">
            <params>
                <param tag="deviceID" defaultValue="null"/>
                <param tag="deviceType" defaultValue="null"/>
                <param tag="Profile" defaultValue="DEFAULT"/>
            </params>
        </method>
        <method name="Disconnect" api="disconnect" type="method" desc="Disconnects the given device from this device">
            <params>
                <param tag="deviceID" defaultValue="null"/>
            </params>
        </method>
        <method name="Pair" api="pair" type="method" desc="Pairs the given device with this device">
            <params>
                <param tag="deviceID" defaultValue="null"/>
            </params>
        </method>
        <method name="Unpair" api="unpair" type="method" desc="Unpairs the given device with this device">
            <params>
                <param tag="deviceID" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Device_Info" api="getDeviceInfo" type="method" desc="Returns the device info of the given device ID">
            <params>
                <param tag="deviceID" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Connected_Devices" api="getConnectedDevices" type="method" desc="Returns a list of connected devices to this device" />
        <method name="Get_Paired_Devices" api="getPairedDevices" type="method" desc="Returns a list of devices that have paired with this device" />
        <event name="Event_On_Discovered_Device" eventName="onDiscoveredDevice" eventId="client.events.1" type="event" desc="Gives discovered Bluetooth devices" />
        <event name="Event_On_Status_Changed" eventName="onStatusChanged" eventId="client.events.1" type="event" desc="Gives status change information" />
        <event name="Event_On_Request_Failed" eventName="onRequestFailed" eventId="client.events.1" type="event" desc="Indicates on request failed" />
    </plugin>


    <!-- Warehouse Plugin Information -->
    <plugin pluginName="Warehouse" serviceName="org.rdk.Warehouse" serviceVersion="1">
        <method name="Get_DeviceInfo" api="getDeviceInfo" type="method" desc="Provides STB device information"/>
        <method name="Set_FrontPanel_State" api="setFrontPanelState" type="method" desc="Sets the discoverable status of the device">
            <params>
                <param tag="state" defaultValue="-1" type="int" />
            </params>
        </method>
        <method name="Light_Reset" api="lightReset" type="method" desc="Performs light reset"/>
        <method name="Is_clean" api="isClean" type="method" desc="Checks locations where customer data may be stored"/>
        <method name="Reset_Device" api="resetDevice" type="method" desc="Resets the STB to the warehouse state">
            <params>
                <param tag="suppressReboot" defaultValue="true" type="bool" />
            </params>
        </method>
        <method name="Internal_Reset" api="internalReset" type="method" desc="Invokes the internal reset script, which reboots the WarehouseService">
            <params>
                <param tag="passPhrase" defaultValue="true" type="string" />
            </params>
        </method>
        <event name="Event_Reset_Done" eventName="resetDone" eventId="client.events.1" type="event" desc="Notifies about the status of the warehouse reset operation" />
    </plugin>


    <!-- LoggingPreferences Plugin Information -->
    <plugin pluginName="LoggingPreferences" serviceName="org.rdk.LoggingPreferences" serviceVersion="1">
        <method name="Is_Keystroke_Mask_Enabled" api="isKeystrokeMaskEnabled" type="method" desc="Gets Keystroke mask status">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Keystroke_Mask_Enabled" api="setKeystrokeMaskEnabled" type="method" desc="Enable or disable Keystroke mask state">
            <params>
                <param tag="keystrokeMaskEnabled" defaultValue="true" type="bool" />
            </params>
        </method>
        <event name="Event_OnKeystroke_Mask_Enabled_Change" eventName="onKeystrokeMaskEnabledChange" eventId="client.events.1" type="event" desc="Keystroke mask status  Change event"/>
    </plugin>


    <!-- DataCapture Plugin Information -->
    <plugin pluginName="DataCapture" serviceName="org.rdk.dataCapture" serviceVersion="1">
        <method name="Enable_Audio_Capture" api="enableAudioCapture" type="method" desc="Enables the audio capture" >
            <params>
                <param tag="bufferMaxDuration" defaultValue="null" type="int"/>
            </params>
        </method>
        <method name="Get_Audio_Clip" api="getAudioClip" type="method" desc="Get the audio captured" >
            <params paramKey="clipRequest">
                <param tag="stream" defaultValue="primary" />
                <param tag="url" defaultValue="null"  />
                <param tag="duration" defaultValue="null" type="int" />
                <param tag="captureMode" defaultValue="preCapture" />
            </params>
        </method>
        <event name="Event_On_AudioClip_Ready" eventName="onAudioClipReady" eventId="client.events.1" type="event" desc="On audio clip ready event" />
    </plugin>


    <!-- Display Settings Plugin Information -->
    <plugin pluginName="DisplaySettings" serviceName="org.rdk.DisplaySettings" serviceVersion="1">
	<method name="Get_Connected_VideoDisplays" api="getConnectedVideoDisplays" type="method" desc="Get the connected video display details"/>
	<method name="Get_Supported_VideoDisplays" api="getSupportedVideoDisplays" type="method" desc="Get the supported video display details"/>
	<method name="Get_Supported_Resolutions" api="getSupportedResolutions" type="method" desc="Get the supported resolutions details">
    	    <params>
	        <param tag="videoDisplay" defaultValue="null"/>
	    </params>	
        </method>
	<method name="Get_Supported_Tv_Resolutions" api="getSupportedTvResolutions" type="method" desc="Get the supported TV Resolutions details">
            <params>
                <param tag="videoDisplay" defaultValue="null"/>
            </params>
        </method>
	<method name="Get_Supported_Settop_Resolutions" api="getSupportedSettopResolutions" type="method" desc="Get the supported Set top box Resolutions details">
        </method>
	<method name="Get_Current_Resolution" api="getCurrentResolution" type="method" desc="Get the current resolution details">
            <params>
                <param tag="videoDisplay" defaultValue="null"/>
            </params>
        </method>
	<method name="Set_Current_Resolution" api="setCurrentResolution" type="method" desc="Set the current resolution values">
            <params>
                <param tag="videoDisplay" defaultValue="null"/>
                <param tag="resolution" defaultValue="null"/>
                <param tag="persist" defaultValue="null" type="bool"/>
            </params>
        </method>
	<method name="Get_Connected_AudioPorts" api="getConnectedAudioPorts" type="method" desc="Get the connected audio port details"/>
	<method name="Get_Supported_AudioPorts" api="getSupportedAudioPorts" type="method" desc="Get the supported audio port details"/>
	<method name="Get_Supported_AudioModes" api="getSupportedAudioModes" type="method" desc="Get the supported audio modes details">
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
	<method name="Get_Sound_Mode" api="getSoundMode" type="method" desc="Get the sound mode details">
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
	<method name="Set_Sound_Mode" api="setSoundMode" type="method" desc="Set the sound mode values">
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="soundMode"  defaultValue="null"/>
                <param tag="persist" defaultValue="null" type="bool"/>
            </params>
        </method>
	<method name="Get_Zoom_Setting" api="getZoomSetting" type="method" desc="Get the zoom setting details"/>
	<method name="Set_Zoom_Setting" api="setZoomSetting" type="method" desc="Set the zoom setting values">
            <params>
                <param tag="zoomSetting" defaultValue="null"/>
            </params>
        </method>
	<method name="Read_EDID" api="readEDID" type="method" desc="Read the EDID of connected output device"/>
	<method name="Read_Host_EDID" api="readHostEDID"  type="method" desc="Read the Host(STB) EDID details"/>
        <method name="Get_Active_Input" api="getActiveInput" type="method" desc="Get the active input status">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Get_Tv_HDR_Support" api="getTvHDRSupport" type="method" desc="Get the TV HDR support details">
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="GetSettopHDRSupport" api="getSettopHDRSupport" type="method" desc="Get the Settop HDR support details"/>
        <method name="Set_VideoPort_Status_InStandby" api="setVideoPortStatusInStandby" type="method" desc="Set the video port status to be used in standby mode">
            <params>
                <param tag="portName" defaultValue="null"/>
                <param tag="enabled" defaultValue="null" type="bool"/>
            </params>
        </method>
        <method name="Get_VideoPort_Status_InStandby" api="getVideoPortStatusInStandby" type="method" desc="Get the video port status to be used in standby mode">
            <params>
                <param tag="portName" defaultValue="null"/>
            </params>
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Get_Current_Output_Settings" api="getCurrentOutputSettings" type="method" desc="Get the current output settings details"/>
        <method name="Set_MS12_Audio_Compression" api="setMS12AudioCompression" type="method" desc="Set the MS12Audio compression values">
            <params>
                <param tag="compresionLevel" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_MS12_Audio_Compression" api="getMS12AudioCompression" type="method" desc="Get the MS12Audio compression  details" >
            <expectedValues>0,1,2,3,4,5,6,7,8,9,10</expectedValues>
        </method>
        <method name="Set_Dolby_Volume_Mode" api="setDolbyVolumeMode" type="method" desc="Set the dolby volume mode as true or false" >
            <params>
                <param tag="dolbyVolumeMode" defaultValue="null" type="bool"/>
            </params>
        </method>
        <method name="Get_Dolby_Volume_Mode" api="getDolbyVolumeMode" type="method" desc="Get the dolby volume mode status" >
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Dialog_Enhancement" api="setDialogEnhancement" type="method" desc="Set the dialog enhancement values" >
            <params>
                <param tag="enhancerlevel" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Dialog_Enhancement" api="getDialogEnhancement" type="method" desc="Get the Dialog Enhancement value" >
            <expectedValues>0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16</expectedValues>
        </method>
        <method name="Set_Intelligent_Equalizer_Mode" api="setIntelligentEqualizerMode" type="method" desc="Set the intelligent equalizer mode values" >
            <params>
                <param tag="intelligentEqualizerMode" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Intelligent_Equalizer_Mode" api="getIntelligentEqualizerMode" type="method" desc="Get the intelligent equalizer modevalue" >
            <expectedValues>1,2,3</expectedValues>
        </method>
        <method name="Set_Volume_Leveller" api="setVolumeLeveller" type="method" desc="Set the volume leveller values" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="level" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Volume_Leveller" api="getVolumeLeveller" type="method" desc="Get the volume leveller value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
            <expectedValues>0,1,2,3,4,5,6,7,8,9,10</expectedValues>
        </method>
        <method name="Set_Bass_Enhancer" api="setBassEnhancer" type="method" desc="Enable or disable the bass enhancer" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="bassBoost" defaultValue="null" type="bool" />
            </params>
        </method>
        <method name="Get_Bass_Enhancer" api="getBassEnhancer" type="method" desc="Get the bass enhancer status" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Surround_Virtualizer" api="setSurroundVirtualizer" type="method" desc="Set the surround virtualizer values" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="boost"  defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Surround_Virtualizer" api="getSurroundVirtualizer" type="method" desc="Get the surround virtualizer value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_MI_Steering" api="setMISteering" type="method" desc="Enable or disable the MI Steering" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="MISteeringEnable"  defaultValue="null" type="bool"/>
            </params>
        </method>
        <method name="Get_MI_Steering" api="getMISteering" type="method" desc="Get the MI steering status" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Enable_Surround_Decoder" api="enableSurroundDecoder" type="method" desc="Enable or disable the surround decoder" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="surroundDecoderEnable"  defaultValue="null" type="bool"/>
            </params>
        </method>
        <method name="Is_Surround_Decoder_Enabled" api="isSurroundDecoderEnabled" type="method" desc="Get the surround decoder status" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_DRC_Mode" api="setDRCMode" type="method" desc="Set the DRC mode values " >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="DRCMode"  defaultValue="null" />
            </params>
        </method>
        <method name="Get_DRC_Mode" api="getDRCMode" type="method" desc="Get the DRC mode value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
            <expectedValues>line,RF</expectedValues>
        </method>
        <method name="Set_Volume_Level" api="setVolumeLevel" type="method" desc="Set the volume level value " >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="volumeLevel"  defaultValue="null" />
            </params>
        </method>
        <method name="Get_Volume_Level" api="getVolumeLevel" type="method" desc="Get the Volume level" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Gain" api="setGain" type="method" desc="Set the audio port gain value " >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="gain"  defaultValue="null" />
            </params>
        </method>
        <method name="Get_Gain" api="getGain" type="method" desc="Get the audio port gain value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Muted" api="setMuted" type="method" desc="Set the audio mute " >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="muted"  defaultValue="null" type="bool" />
            </params>
        </method>
        <method name="Get_Muted" api="getMuted" type="method" desc="Get the audio mute status" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
            <expectedValues>True,False</expectedValues>
        </method>
        <method name="Set_Audio_Delay" api="setAudioDelay" type="method" desc="Set the audio delay value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="audioDelay"  defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Audio_Delay" api="getAudioDelay" type="method" desc="Get the audio delay value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Audio_Delay_Offset" api="setAudioDelayOffset" type="method" desc="Set the audio delay offset value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="audioDelayOffset"  defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Audio_Delay_Offset" api="getAudioDelayOffset" type="method" desc="Get the audio delay offset value" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Audio_Atmos_Output_Mode" api="setAudioAtmosOutputMode" type="method" desc="Enable or disable the audio atmos output modee" >
            <params>
                <param tag="enable"  defaultValue="null" type="bool" />
            </params>
        </method>
        <method name="Get_Sink_Atmos_Capability" api="getSinkAtmosCapability" type="method" desc="Get the sink atmos capability" >
            <expectedValues>1,2,3</expectedValues>
        </method>
        <method name="Get_TV_HDR_Capabilities" api="getTVHDRCapabilities" type="method" desc="Get the TV HDR  capability" >
            <expectedValues>0,1,2,4,8</expectedValues>
        </method>
        <method name="Is_Connected_Device_Repeater" api="isConnectedDeviceRepeater" type="method" desc="Get the TV HDR capability" />
        <method name="Get_Default_Resolution" api="getDefaultResolution" type="method" desc="Get the default resolution value" />
        <method name="setScartParameter" api="setScartParameter" type="method" desc="Set Scart parameter values" >
            <params>
                <param tag="scartParameter"  defaultValue="null" />
                <param tag="scartParameterData"  defaultValue="null" />
            </params>
        </method>
        <method name="Get_Supported_MS12_Audio_Profiles" api="getSupportedMS12AudioProfiles" type="method" desc="Gets the supported MS12 audio profiles" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_MS12_Audio_Profile" api="getMS12AudioProfile" type="method" desc="Gets the current MS12 audio profile" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_MS12_Audio_Profile" api="setMS12AudioProfile" type="method" desc="Configures selected MS12 Audio Profile" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="ms12AudioProfile" defaultValue="null"/>
            </params>
        </method>
        <method name="Get_Enable_Audio_Port" api="getEnableAudioPort" type="method" desc="Gets the current port enable status of specified input audioPort" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Enable_Audio_Port" api="setEnableAudioPort" type="method" desc="Enable or disable specified audioPort based on the input audio port" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="enable" type="bool" />
            </params>
        </method>
        <method name="Get_Graphic_Equalizer_Mode" api="getGraphicEqualizerMode" type="method" desc="Gets the Graphic equalizer mode for specified audio port" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
            </params>
        </method>
        <method name="Set_Graphic_Equalizer_Mode" api="setGraphicEqualizerMode" type="method" desc="Sets the Graphic  equalizer mode for specified audio port" >
            <params>
                <param tag="audioPort" defaultValue="null"/>
                <param tag="graphicEqualizerMode" type="int" />
            </params>
        </method>
        <event name="Event_Zoom_Settings_Updated" eventName="zoomSettingUpdated" eventId="client.events.1" type="event" desc="Zoom settings updated event "/>
    </plugin>

    <!-- Messenger Plugin Information -->
    <plugin pluginName="Messenger" serviceName="Messenger" serviceVersion="1">
        <method name="Messenger_Join" api="join" type="method" desc="Used to join a room">
            <params>
                <param tag="user" type="string" />
                <param tag="room" type="string" />
            </params>
        </method>
        <method name="Messenger_Leave" api="leave" type="method" desc="Used to leave a messaging room">
            <params>
                <param tag="roomid" type="string" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Messenger_Send" api="send" type="method" desc="Sends a message to a room">
            <params>
                <param tag="roomid" type="string" />
                <param tag="message" type="string" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
    </plugin>

    <!-- Monitor Plugin Information -->
    <plugin pluginName="Monitor" serviceName="Monitor" serviceVersion="1">
        <method name="Reset_Statistics" api="resetstats" type="method" desc="Resets memory and process statistics for a single service watched by the Monitor">
            <params>
                <param tag="callsign" type="string" />
            </params>
        </method>
        <method name="Restart_Limits"  api="restartlimits" type="method" desc="Sets new restart limits for a service" >
            <params paramType="userGenerate" useMethodTag="monitor_get_restart_params" >
                <param tag="callsign" defaultValue="null" type="string" />
                <param tag="limit" defaultValue="null" type="int" />
                <param tag="window" defaultValue="null" type="int" />
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Status" api="status"  type="property" desc="Provides access to the service statistics" />
    </plugin>

    <!-- ScreenCapture Plugin Information -->
    <plugin pluginName="ScreenCapture" serviceName="org.rdk.ScreenCapture" serviceVersion="1">
        <method name="Upload_Screen_Capture" api="uploadScreenCapture" type="method" desc="Takes screenshot and uploads it to the specified url">
            <params>
                <param tag="url" type="string" />
                <param tag="callGUID"  type="string"/>
            </params>
        </method>
        <event name="Event_Upload_Complete" eventName="uploadComplete" eventId="client.events.1" type="event" desc="Fired after an upload of screen capture" />
    </plugin>
 
    <!-- Timer Plugin Information -->
    <plugin pluginName="Timer" serviceName="org.rdk.Timer" serviceVersion="1">
        <method name="Start_Timer" api="startTimer" type="method" desc="Starts the timer" >
            <params>
                <param tag="interval" defaultValue="15" type="int"/>
                <param tag="mode" defaultValue="GENERIC" />
                <param tag="repeatInterval" defaultValue="0" type="int"/>
                <param tag="remindBefore" defaultValue="0" type="int"/>
            </params>
        </method>
        <method name="Get_Timer_Status" api="getTimerStatus" type="method" desc="Gets the timer status" >
            <params>
                <param tag="timerId" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Cancel_Timer" api="cancel" type="method" desc="Cancels the timer" >
            <params>
                <param tag="timerId" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Suspend_Timer" api="suspend" type="method" desc="suspends the timer" >
            <params>
                <param tag="timerId" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Resume_Timer" api="resume" type="method" desc="Resumes the timer" >
            <params>
                <param tag="timerId" defaultValue="null" type="int" />
            </params>
        </method>
        <method name="Get_Timers_Status" api="getTimers" type="method" desc="Gets all the timer status" >
            <params>
                <param tag="timerId" defaultValue="null" type="int" />
            </params>
        </method>
        <event name="Event_Timer_Expired" eventName="timerExpired" eventId="client.events.1" type="event" desc="Timer expired event" />
        <event name="Event_Timer_Expiry_Reminder" eventName="timerExpiryReminder" eventId="client.events.1" type="event" desc="Timer expiry reminder event" />
    </plugin>

    <!-- DeviceIdentification Plugin Information -->
    <plugin pluginName="DeviceIdentification" serviceName="DeviceIdentification" serviceVersion="1">
        <method name="Get_Device_Platform_Info" api="deviceidentification" type="property" desc="Provides access to the device paltform specific information"/>
    </plugin>
    
    <!-- FirmwareControl Plugin Information -->
    <plugin pluginName="FirmwareControl" serviceName="FirmwareControl" serviceVersion="1">
        <method name="Upgrade" api="upgrade" type="method" desc="Upgrade the device to the given firmware">
            <params>
                <param tag="name" defaultValue="null"/>
                <param tag="location" defaultValue="null"/>
                <param tag="type" defaultValue="CDL"/>
                <param tag="progressinterval" defaultValue="10"/>
                <param tag="hmac" defaultValue="null"/>
            </params>
            <expectedValues>null</expectedValues>
        </method>
        <method name="Get_Status" api="status"  type="property" desc="Provides access to the current status of a upgrade" />
        <method name="Get_Download_Size" api="downloadsize"  type="property" desc="Provides access to the max free space available to download image" />
        <event name="Upgrade_Progress_Event" eventName="upgradeprogress" eventId="client.events.1" type="event" desc="Notifies progress of upgrade" />
    </plugin>
    
    <!-- AVInput Plugin Information -->
    <plugin pluginName="AVInput" serviceName="org.rdk.AVInput" serviceVersion="1">
        <method name="AVInput_NumberOfInputs" api="numberOfInputs" type="method" desc="Gets the available number of inputs" />
        <method name="AVInput_CurrentVideoMode" api="currentVideoMode" type="method" desc="Gets the current video mode" />
        <method name="AVInput_ContentProtected" api="contentProtected" type="method" desc="Checks for content protection" >
            <expectedValues>True</expectedValues>
        </method>
    </plugin>

    <!-- HdmiInput Plugin Information -->
    <plugin pluginName="HdmiInput" serviceName="org.rdk.HdmiInput" serviceVersion="1">
        <method name="Get_HdmiInput_Devices" api="getHDMIInputDevices" type="method" desc="Returns an array of hdmi input devices"/>
        <method name="Start_HdmiInput" api="startHdmiInput" type="method" desc="Activates selected Hdmi In Port as primary video source">
            <params>
                <param tag="portId" type="int" />
            </params>
        </method>
        <method name="Stop_HdmiInput" api="stopHdmiInput" type="method" desc="Deactivates current Hdmi In Port selected as primary video source">
            <params>
                <param tag="portId" type="int" />
            </params>
        </method>
        <method name="Write_Edid" api="writeEDID" type="method" desc="Changes a current EDID value">
            <params>
                <param tag="deviceId" type="int" />
                <param tag="message" type="string" defaultValue="EDID"/>
            </params>
        </method>
        <method name="Read_Edid" api="readEDID" type="method" desc="Returns a current EDID value">
            <expectedValues>EDID</expectedValues>
        </method>
    </plugin>
</thunderPlugins>


