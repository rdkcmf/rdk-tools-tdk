<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2022 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<testPlugin pluginName="HdmiCecSink" pluginVersion="1">
    <pluginPreRequisite>
          <!-- Activate HDMICEC plugin -->
      <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
        <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
            <params>
              <param tag="plugin" value="org.rdk.HdmiCecSink" indexOnly="true" />
            </params>
            <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.HdmiCecSink" />
        </testStep>
        <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
            <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.HdmiCecSink" />
            <params>
              <param tag="callsign" value="org.rdk.HdmiCecSink" />
            </params>
        </testStep>
        <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
            <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.HdmiCecSink" />
            <params>
              <param tag="plugin" value="org.rdk.HdmiCecSink" indexOnly="true" />
            </params>
            <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.HdmiCecSink" expectedValues="activated"/>
        </testStep>
      </prerequisite>
           <!-- Activate DisplaySettings plugin -->
      <prerequisite requisiteId="2" requisiteName="Activate_DisplaySettings_Plugin">
        <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
            <params>
              <param tag="plugin" value="org.rdk.DisplaySettings" indexOnly="true" />
            </params>
            <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.DisplaySettings" />
        </testStep>
        <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
            <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.DisplaySettings" />
            <params>
              <param tag="callsign" value="org.rdk.DisplaySettings" />
            </params>
        </testStep>
        <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
            <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.DisplaySettings" />
            <params>
              <param tag="plugin" value="org.rdk.DisplaySettings" indexOnly="true" />
            </params>
            <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.DisplaySettings" expectedValues="activated"/>
        </testStep>
      </prerequisite>

      <!-- check if TV connect. Test case need to be executed only when TV is connected. -->
      <prerequisite requisiteId="3" requisiteName="Get_Display_Connected_Status">
          <testStep testStepId="1" name="Check_Display_Connected_Status" method="Get_Connected_VideoDisplays" pluginName="DisplaySettings">
              <resultGeneration useMethodTag="display_connected_status" />
          </testStep>
      </prerequisite>

      <!-- Enable HDMI CEC. Test case need to be executed only when HDMICEC is enabled. -->
      <prerequisite requisiteId="4" requisiteName="Enable HDMICEC">
        <!-- Enable HDMICEC -->
            <testStep testStepId="1" name="Set_Enabled" method="Set_Enabled" >
                <params>
                  <param tag="enabled" value="true" />
                </params>
                <resultGeneration useMethodTag="hdmicec_check_result" />
            </testStep>

        <!-- Get Current status -->
            <testStep testStepId="2" name="Get_Enabled" method="Get_Enabled" >
                <resultGeneration useMethodTag="hdmicec_get_enabled_status" expectedValues="True" />
            </testStep>
      </prerequisite>

      <prerequisite requisiteId="5" requisiteName="Check_Connected_Device_Status">
          <testStep testStepId="1" name="Get_Connected_Device_Status" method="Get_Device_List" >
              <resultGeneration useMethodTag="hdmicecsink_check_device_list" />
          </testStep>
      </prerequisite>

      <prerequisite requisiteId="6" requisiteName="Register_And_Listen_Events" type="eventRegister" trace="false" >
            <event pluginName="HdmiCecSink" eventName="Event_Report_Cec_Enabled" />
      </prerequisite>

    </pluginPreRequisite>



    <!-- Test case 01 -->
    <testCase testCaseId="HdmiCecSink_01" testCaseName= "Enable_Disable_HDMICEC" desc="Enable HDMICEC">
        <testCaseInfo testCaseType="loop" revert="true" />
        <testStep testStepId="1" name="Get_Enabled" method="Get_Enabled" saveResult="true" revertGet="yes">
          <resultGeneration useMethodTag="hdmicec_get_enabled_status" >
            <expectedValues useDefault="true" />
          </resultGeneration>
        </testStep>

	<testStep testStepId="2" name="Set_Enabled" testStepType="loop" >
         <subtestStep subtestStepId="1" name="Set_Enabled" method="Set_Enabled" revertSet="yes">
           <params>
             <param tag="enabled" value="False,True" iteration="true" revertParam="yes" />
           </params>
           <resultGeneration useMethodTag="hdmicec_check_result" />
         </subtestStep>

         <subtestStep subtestStepId="2" name="Get_Enabled" method="Get_Enabled" revertFlag="yes">
           <resultGeneration useMethodTag="hdmicec_get_enabled_status" >
             <expectedValues useIterableValue="true" />
           </resultGeneration>
         </subtestStep>
      
	<subtestStep subtestStepId="3" name="Check_Report_Cec_Enabled_Event" event="Event_Report_Cec_Enabled" action="eventListener" delay="3"  >
              <resultGeneration useMethodTag="hdmicecsink_check_report_cec_enabled_event" >
                <expectedValues useIterableValue="true" />
              </resultGeneration>
        </subtestStep>
        </testStep>
        <testCasePostRequisite>
                <postrequisite requisiteId="1" requisiteName="Check_HdmiCec_Enabled">
                    <testStep testStepId="1" name="Get_Enabled" method="Get_Enabled" saveResult="true">
			    <resultGeneration useMethodTag="hdmicec_get_enabled_status" />
                    </testStep>
                    <testStep testStepId="2" name="Set_Enabled" method="Set_Enabled" >
                        <conditionalExecution enable="true" Id="1" useMethodTag="hdmicecsink_check_cec_enabled_status"/>
                        <params>
                            <param tag="enabled" value="True" />
                        </params>
                        <resultGeneration useMethodTag="hdmicec_check_result" />
                    </testStep>
                    <testStep testStepId="3" name="Get_Enabled" method="Get_Enabled" >
                        <conditionalExecution enable="true" Id="1" useMethodTag="hdmicecsink_check_cec_enabled_status"/>
                        <resultGeneration useMethodTag="hdmicec_get_enabled_status" expectedValues="True" />
                    </testStep>
                </postrequisite>
        </testCasePostRequisite>
    </testCase>
     
    <testCase testCaseId="HdmiCecSink_02" testCaseName="Get_Active_Source_Logical_Address" desc="Checks active source Logical Address">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Logical_Address" method="Get_Active_Source">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_logical_address" >
            <expectedValues useConfigFile="true" key="HDMICECSink_ACTIVE_SOURCE_LOGICAL_ADDR_INFO"/>
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_03" testCaseName="Get_CEC_Physical_Address" desc="Check CEC Physical Address">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Physical_Address" method="Get_Active_Source">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_physical_address" >
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_04" testCaseName="Get_Active_Source_CEC_Version" desc="Checks Active source CEC Version">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Source_Cec_Version" method="Get_Active_Source">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_cec_version" >
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_05" testCaseName="Get_Active_Source_Power_Status" desc="Checks the Active source power status">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Source_Power_Status" method="Get_Active_Source">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_power_status" expectedValues="ON" >
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_06" testCaseName="Get_Active_Source_Vendor_ID" desc="Checks the Active source Vendor ID of the device">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Source_Vendor_ID" method="Get_Active_Source">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_vendor_id">
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_07" testCaseName="Get_Vendor_ID" desc="Checks the current vendor ID used by host device">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Vendor_ID" method="Get_Vendor_ID">
          <resultGeneration useMethodTag="hdmicecsink_get_vendor_id">
          </resultGeneration>
        </testStep>
    </testCase> 

    <testCase testCaseId="HdmiCecSink_08" testCaseName="Get_Audio_Device_Connected_Status" desc="Checks the audio device connected status">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Audio_Device_Connected_Status" method="Get_Audio_Device_Connected_Status">
	  <resultGeneration useMethodTag="hdmicecsink_check_audio_connected_status" >
          </resultGeneration>
        </testStep>
    </testCase>
    
    <testCase testCaseId="HdmiCecSink_09" testCaseName="Get_OSD_Name" desc="Checks the OSD name used by host device">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_OSD_Name" method="Get_OSD_Name">
          <resultGeneration useMethodTag="hdmicecsink_get_osd_name" >
          </resultGeneration>
        </testStep>
    </testCase>
    
    <testCase testCaseId="HdmiCecSink_10" testCaseName="Check_Active_Route_Logical_Address" desc="Checks the active route logical address">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Route_Logical_Address" method="Get_Active_Route">
	  <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_logical_address">
	        <expectedValues useConfigFile="true" key="HDMICECSINK_ACTIVE_SOURCE_LOGICAL_ADDR_INFO"/>		                 
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_11" testCaseName="Check_Active_Route_Physical_Address" desc="Check the active route physical address">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Route_Physical_Address" method="Get_Active_Route">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_physical_address,active_route" >
          </resultGeneration>
        </testStep>
    </testCase>

    <testCase testCaseId="HdmiCecSink_12" testCaseName="Check_Active_Route_OSD_Name" desc="Checks the active route OSD name">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_OSD_Name" method="Get_Active_Route">
	  <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_osd_name" >
             <expectedValues useConfigFile="true" key="HDMICECSINK_ACTIVE_SOURCE_OSD_NAME"/>
          </resultGeneration>
        </testStep>
    </testCase> 

    <testCase testCaseId="HdmiCecSink_13" testCaseName="Check_Active_Route_Vendor_ID" desc="Checks the Active route Vendor ID of the device">
        <testCaseInfo testCaseType="direct"/>
        <testStep testStepId="1" name="Get_Active_Route_Vendor_ID" method="Get_Active_Route">
          <resultGeneration useMethodTag="hdmicecsink_check_active_source_and_route_details" arguments="get_vendor_id">
          </resultGeneration>
        </testStep>
    </testCase> 

</testPlugin>

