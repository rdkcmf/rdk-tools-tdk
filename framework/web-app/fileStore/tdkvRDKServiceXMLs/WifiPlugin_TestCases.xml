<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<testPlugin pluginName="Wifi" pluginVersion="1">

        <pluginPreRequisite>
          <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                <params>
                  <param tag="callsign" value="org.rdk.Wifi" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                <params>
                  <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" />
            </testStep>
          </prerequisite>

          <!-- Only if You have not connected ethernet or you enabled the RFC for default interface -->
          <!--
          <prerequisite requisiteId="2" requisiteName="Check_WIFI_Adapter_State">
            <testStep testStepId="1" name="Get_Current_State" method="Get_Current_State" saveResult="true" >
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_state_valid"/>
            </testStep>
            <testStep testStepId="2" name="Enable_WIFI_Adapter" method="Set_Enabled">
                <conditionalExecution enable="true" Id="1" useMethodTag="wifi_check_adapter_state" arguments="isDisabled" />
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Get_Current_State" method="Get_Current_State">
                <conditionalExecution enable="true" Id="1" useMethodTag="wifi_check_adapter_state" arguments="isDisabled" />
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_state_enabled"/>
            </testStep>
          </prerequisite> -->

          <prerequisite requisiteId="2" requisiteName="Register_And_Listen_Events" type="eventRegister" trace="false">
            <event pluginName="Wifi" eventName="Event_On_WIFI_State_Changed" />
            <event pluginName="Wifi" eventName="Event_On_Available_SSIDs" />
	    <event pluginName="Wifi" eventName="Event_On_Error" /> 
	    <event pluginName="Controller" eventName="Event_Controller_State_Changed" />
          </prerequisite>
          <prerequisite requisiteId="3" requisiteName="Enable_Preferred_network_parameter" >
            <testStep testStepId="1" name="Enable_Preferred_Network_Parameter"  action="externalFnCall"  >
                <resultGeneration useMethodTag="Enable_TR181_Parameter" >
                  <arguments useConfigFile="true" key="PREFERRED_NETWORK_PARAMETER"/>
                </resultGeneration>
            </testStep>
          </prerequisite>
        </pluginPreRequisite>

        <!-- Only if You have not connected ethernet or you enabled the RFC for default interface -->
        <!--
        <testCase testCaseId="WIFI_01" testCaseName="WIFI_Enable_Disable_Adapter" desc="Toggles WIFI Adapter state">
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_Current_State" method="Get_Current_State" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_state_enabled" />
            </testStep>
            <testStep testStepId="2" name="Set_Enabled" method="Set_Enabled" revertSet="yes">
                <params>
                  <param tag="enable" usePreviousResult="true" Id="1" useMethodTag="wifi_toggle_adapter_state" revertParam="yes" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Get_Current_State" method="Get_Current_State" revertFlag="yes">
                <resultGeneration useMethodTag="wifi_check_adapter_state">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="wifi_toggle_adapter_state" arguments="get_state_no" />
                </resultGeneration>
            </testStep>
        </testCase> -->


       <testCase testCaseId="WIFI_01" testCaseName="WIFI_Get_Available_SSIDs" desc="Scan and get available SSID using onAvailableSSIDs Event">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_On_Available_SSIDs_Event" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
              <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="get_ssid_names" />
            </testStep>
            <testStep testStepId="3" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_02" testCaseName="WIFI_Save_And_Clear_SSIDs" desc="Saves and Clears the SSID Info">
            <testStep testStepId="1" name="Save_SSID_Info" method="Save_SSID_Info" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_save_clear_ssid" />
            </testStep>
            <testStep testStepId="2" name="Clear_SSID_Info" method="Clear_SSID_Info" delay="3">
                <resultGeneration useMethodTag="wifi_check_save_clear_ssid" />
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_03" testCaseName="WIFI_Connect_Disconnect_SSIDs" desc="Connects to the given SSID and disconnects">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50" >
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="9" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="10" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="11" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="12" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="13" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
       <testCase testCaseId="WIFI_04" testCaseName="WIFI_Retrieve_Connected_SSID" desc="Retrieves connected SSID">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="5" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="6" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="7" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
        
       <testCase testCaseId="WIFI_05" testCaseName="WIFI_Check_Connected_SSID_After_Disconnect" desc="Checks connected SSID after disconnect">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50" >
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="9" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="10" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="11" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="12" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="13" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="14" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_no_ssid"/>
            </testStep>
            <testStep testStepId="15" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
       <testCase testCaseId="WIFI_06" testCaseName="WIFI_Connect_With_Invalid_Passphrase" desc="Check if Connects to the given SSID with invalid passphrase">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_On_Available_SSIDs_Event" event="Event_On_Available_SSIDs" action="eventListener" delay="3">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_INVALID_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Check_On_Error_Event" event="Event_On_Error" action="eventListener" delay="7">
              <resultGeneration useMethodTag="wifi_check_on_error_event" expectedValues="4" />
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_07" testCaseName="WIFI_Connect_With_Invalid_SSID" desc="Check if Connects to the given invalid SSID">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Connect" method="Connect" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_INVALID_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Check_On_Error_Event" event="Event_On_Error" action="eventListener" delay="15">
              <resultGeneration useMethodTag="wifi_check_on_error_event" expectedValues="5" />
            </testStep>
            <testStep testStepId="4" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_08" testCaseName="WIFI_Initiate_And_Cancel_WPS_Pairing" desc="Checks initiate and cancel WPS pairing">
            <testStep testStepId="1" name="Initiate_WPS_Pairing" method="Initiate_WPS_Pairing" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Cancel_WPS_Pairing" method="Cancel_WPS_Pairing" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_09" testCaseName="WIFI_Enable_Disable_Signal_Threshold_Change" desc="Toggles signal threshold change">
           <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Is_Signal_Threshold_Change_Enabled" method="Is_Signal_Threshold_Change_Enabled" saveResult="true" revertGet="yes">
                <resultGeneration useMethodTag="wifi_check_signal_threshold_change_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Signal_Threshold_Change_Enabled" method="Set_Signal_Threshold_Change_Enabled" revertSet="yes">
                <params>
                  <param tag="enabled" usePreviousResult="true" Id="1" useMethodTag="wifi_toggle_signal_threshold_status" arguments="get_toggle_value" revertParam="yes" />
                 <param tag="interval" value="2000" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Is_Signal_Threshold_Change_Enabled" method="Is_Signal_Threshold_Change_Enabled" revertFlag="yes">
                <resultGeneration useMethodTag="wifi_check_signal_threshold_change_status">
                    <expectedValues usePreviousResult="true" Id="1" useMethodTag="wifi_toggle_signal_threshold_status" />
                </resultGeneration>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_10" testCaseName="WIFI_Check_SSID_Paired" desc="Checks if the device is paired to an SSID">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface" pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="9" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="10" name="Is_Paired" method="Is_Paired" >
                 <resultGeneration useMethodTag="wifi_check_ssid_pairing" expectedValues="0"/>
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
	    </testStep>
            <testStep testStepId="4" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>
       <testCase testCaseId="WIFI_11" testCaseName="WIFI_Get_Paired_SSID" desc="Gets the SSID to which the device is paired with">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="9" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="10" name="Get_Paired_SSID" method="Get_Paired_SSID" >
                <resultGeneration useMethodTag="wifi_get_paired_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="4" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>
       <testCase testCaseId="WIFI_12" testCaseName="WIFI_Get_Paired_SSID_Info" desc="Gets the SSID to which the device is paired with including the BSSID">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50" >
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="9" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="10" name="Get_Paired_SSID_Info" method="Get_Paired_SSID_Info" >
                <resultGeneration useMethodTag="wifi_get_paired_ssid" >
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="4" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>
       <testCase testCaseId="WIFI_13" testCaseName="WIFI_Enable_Disable_Adapter" desc="Toggles WIFI Adapter state">
            <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="Set_WIFI_Adapter_Disabled" method="Set_Enabled">
                <params>
                  <param tag="enable" value="false" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Adapter_Enabled" method="Set_Enabled">
                <params>
                  <param tag="enable" value="true" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
        
       <testCase testCaseId="WIFI_14" testCaseName="WIFI_Check_Scanned_SSID_Name" desc="Scan for particular SSID and check the SSID in onAvailableSSIDs Event">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME" />
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value="" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_On_Available_SSIDs_Event" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="3" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_15" testCaseName="WIFI_Get_Supported_Security_Modes" desc="Checks the supported security modes" >
           <testCaseInfo testCaseType="direct" />
           <testStep testStepId="1" name="Get_Supported_Security_Modes" method="Get_Supported_Security_Modes">
               <resultGeneration useMethodTag="wifi_check_supported_security_modes" />
           </testStep>
       </testCase>

       <testCase testCaseId="WIFI_16" testCaseName="WIFI_Connect_5GHZ_Acess_Point" desc="Checks if the device connects to the given 5ghz SSID">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Set_WIFI_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network">
                <params>
                  <param tag="interface"  value="WIFI" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="3" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME_5GHZ" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME_5GHZ"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE_5GHZ"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE_5GHZ"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME_5GHZ" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="8" name="Get_Default_Interface" method="Get_Default_Interface" pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="4" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>

       <testCase testCaseId="WIFI_17" testCaseName="WIFI_Retrieve_Current_State" desc="Retrieves current state after connecting to Wifi">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="IP_CHANGE_LIGHTNING_APP_SUPPORT" useMethodTag="wifi_check_feature_applicability" arguments="yes" />
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="5" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="6" name="Set_Default_Interface_WiFi" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes">
                <params>
                  <param tag="interface" value="WIFI" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="7" name="Get_Default_Interface" method="Get_Default_Interface" pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="WIFI" />
            </testStep>
            <testStep testStepId="8" name="Get_Connected_SSID" method="Get_Connect_SSID" >
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="9" name="Get_Current_State" method="Get_Current_State">
                <resultGeneration useMethodTag="wifi_check_adapter_state" arguments="check_connection_status"/>
            </testStep>
       <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Setting_Default_Interface_Ethernet">
            <testStep testStepId="1" name="Set_Ethernet_Interface_Enabled" method="Set_Interface_Enabled" pluginName="Network" >
                <params>
                  <param tag="interface"  value="ETHERNET" />
                  <param tag="enabled"   value="true" />
                  <param tag="persist"   useDefault="true"/>
                </params>
                <resultGeneration useMethodTag="network_check_interface_enable_set_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Default_Interface_Ethernet" method="Set_Default_Interface" pluginName="Network" ipChangeStep="yes" >
                <params>
                  <param tag="interface" value="ETHERNET" />
                  <param tag="persist"   useDefault= "true"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true" />
            </testStep>
            <testStep testStepId="3" name="Get_Default_Interface" method="Get_Default_Interface"  pluginName="Network" delay="50">
                <resultGeneration useMethodTag="network_get_default_interface" arguments="check_interface" expectedValues="ETHERNET" />
            </testStep>
            <testStep testStepId="4" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
         </postrequisite>
       </testCasePostRequisite>
       </testCase>

       <!--testCase testCaseId="WIFI_18" testCaseName="WIFI_Connect_To_Wifi_With_Saved_Valid_Credentials" desc="Checks whether able to connect to wifi with saved credentials">
            <testStep testStepId="1" name="Save_SSID_Info" method="Save_SSID_Info" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_save_clear_ssid" />
            </testStep>
            <testStep testStepId="2" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect" delay="5">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Get_Connected_SSID" method="Get_Connect_SSID" delay="3">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="3">
              <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID" delay="3">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Disconnect" method="Disconnect" delay="3">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="8" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_19" testCaseName="WIFI_Connect_To_Wifi_With_Saved_Invalid_Credentials" desc="Checks the onError event by connecting to saved invalid credentials">
            <testStep testStepId="1" name="Save_SSID_Info" method="Save_SSID_Info" >
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_INVALID_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_save_clear_ssid" />
            </testStep>
            <testStep testStepId="2" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect" delay="5">
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Check_On_Error_Event" event="Event_On_Error" action="eventListener" delay="15">
              <resultGeneration useMethodTag="wifi_check_on_error_event" expectedValues="5" />
            </testStep>
            <testStep testStepId="5" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase-->

       <testCase testCaseId="WIFI_18" testCaseName="WIFI_Check_Scanned_SSID_Frequency_2.4Ghz" desc="Scan for the 2.4 ghz SSID and check all the SSIDs listed in onAvailableSSIDs Event is 2.4 ghz">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value="" />
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value="2.4" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_On_Available_SSIDs_Event" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_frequency" expectedValues="2.4" />
            </testStep>
            <testStep testStepId="3" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_19" testCaseName="WIFI_Check_Scanned_SSID_Frequency_5Ghz" desc="Scan for the 5 ghz SSID and check all the SSIDs listed in onAvailableSSIDs Event is 5 ghz">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value="" />
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value="5" />
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_On_Available_SSIDs_Event" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_frequency" expectedValues="5" />
            </testStep>
            <testStep testStepId="3" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>

       <testCase testCaseId="WIFI_20" testCaseName="WIFI_ActivateDeactivate_Event_Test" desc="Validates statechange event on Activating/deactivating the plugin">
            <testCaseInfo testCaseType="direct" />
            <testCasePreRequisite>
                 <prerequisite requisiteId="1" requisiteName="Activate_Plugins">
                   <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                     <params>
                       <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                     </params>
                     <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" />
                   </testStep>
                   <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                     <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                     <params>
                       <param tag="callsign" value="org.rdk.Wifi" />
                     </params>
                   </testStep>
                   <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                     <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.Wifi" />
                     <params>
                       <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                     </params>
                     <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" expectedValues="activated"/>
                   </testStep>
                </prerequisite>
            </testCasePreRequisite>
            <testStep testStepId="1" name="Deactivate_WIFI_Plugin" method="Deactivate_Plugin"  pluginName="Controller">
                  <params>
                    <param tag="callsign"  value="org.rdk.Wifi" />
                  </params>
            </testStep>
            <testStep testStepId="2" name="Check_State_Change_Event" event="Event_Controller_State_Changed" action="eventListener" delay="2" pluginName="Controller">
              <resultGeneration useMethodTag="controller_check_state_change_event" expectedValues="org.rdk.wifi,deactivated,requested"/>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                 <params>
                     <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                 </params>
                 <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" expectedValues="deactivated"/>
            </testStep>
            <testStep testStepId="4" name="Activate_WIFI_Plugin" method="Activate_Plugin"  pluginName="Controller" delay="1">
                  <params>
                    <param tag="callsign" value="org.rdk.Wifi" />
                  </params>
            </testStep>
            <testStep testStepId="5" name="Check_State_Change_Event" event="Event_Controller_State_Changed" action="eventListener" delay="2" pluginName="Controller">
              <resultGeneration useMethodTag="controller_check_state_change_event" expectedValues="org.rdk.wifi,activated,requested"/>
            </testStep>
            <testStep testStepId="6" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller" PluginOnStep="yes" >
                 <params>
                     <param tag="plugin" value="org.rdk.Wifi" indexOnly="true" />
                 </params>
                 <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.Wifi" expectedValues="activated"/>
            </testStep>
       </testCase>
     
       <testCase testCaseId="WIFI_21" testCaseName="WIFI_Check_On_WIFI_State_Changed_Event" desc="Checks the on wifi state changed event on various wifi connection state">
            <testStep testStepId="1" name="Start_Scan" method="Start_Scan" >
                <params>
                  <param tag="ssid" value=""/>
                  <param tag="incremental" useDefault="true" />
                  <param tag="frequency" value=""/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="2" name="Check_SSID_Availability" event="Event_On_Available_SSIDs" action="eventListener" delay="5">
                <resultGeneration useMethodTag="wifi_check_available_ssids_event" arguments="check_scanned_ssid_name" >
                    <expectedValues  useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="3" name="Connect" method="Connect">
                <params>
                  <param tag="ssid" useConfigFile="true" key="WIFI_SSID_NAME"/>
                  <param tag="passphrase" useConfigFile="true" key="WIFI_PASSPHRASE"/>
                  <param tag="securityMode" useConfigFile="true" key="WIFI_SECURITY_MODE"/>
                </params>
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="4" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" clear="false" delay="5">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="4"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" >
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="5"/>
            </testStep>
            <testStep testStepId="6" name="Get_Connected_SSID" method="Get_Connect_SSID">
                <resultGeneration useMethodTag="wifi_get_connected_ssid" arguments="check_ssid">
                    <expectedValues useConfigFile="true" key="WIFI_SSID_NAME" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Disconnect" method="Disconnect" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
            <testStep testStepId="8" name="Check_On_WIFI_State_Changed_Connected_Event" event="Event_On_WIFI_State_Changed" action="eventListener" delay="3">
                <resultGeneration useMethodTag="wifi_check_state_change_event" expectedValues="2"/>
            </testStep>
            <testStep testStepId="9" name="Stop_Scan" method="Stop_Scan" >
                <resultGeneration useMethodTag="wifi_check_set_operation" expectedValues="true"/>
            </testStep>
       </testCase>
</testPlugin>
