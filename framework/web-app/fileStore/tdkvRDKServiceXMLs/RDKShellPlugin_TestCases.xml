<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<testPlugin pluginName="RDKShell" pluginVersion="1">
        <pluginPreRequisite>
          <prerequisite requisiteId="1" requisiteName="Activate_RDKShell_Plugin">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.RDKShell" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.RDKShell" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.RDKShell" />
                <params>
                  <param tag="callsign" value="org.rdk.RDKShell" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.RDKShell" />
                <params>
                  <param tag="plugin" value="org.rdk.RDKShell" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.RDKShell" expectedValues="activated"/>
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="2" requisiteName="Deactivate_Plugins">
            <testStep testStepId="1" name="Check_And_Deactivate_Plugins" testStepType="loop">
              <subtestStep subtestStepId="1" name="Deactivate_Plugin" method="Deactivate_Plugin"  pluginName="Controller">
                <params>
                  <param tag="callsign"  iteration="true" useConfigFile="true" key="RDKSHELL_PREREQ_PLUGINS" />
                </params>
              </subtestStep>
              <subtestStep subtestStepId="2" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller" >
                <params>
                  <param tag="plugin" useIterable="true" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" expectedValues="deactivated">
                  <arguments value="check_status" useIterableArg="true" />
                </resultGeneration>
              </subtestStep>
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="3" requisiteName="Launch_Applications">
            <testStep testStepId="1" name="Check_And_Launch_Applications" testStepType="loop">
              <subtestStep subtestStepId="1" name="Launch_Application_Type1" method="LaunchApplication" >
                  <conditionalExecution enable="true" useMethodTag="rdkshell_check_app_launch_type1" useIterableArg="true" />
                  <params>
                    <param tag="callsign" iteration="true" useConfigFile="true" key="RDKSHELL_PREREQ_PLUGINS"  />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_for_results" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Launch_Application_Type2" method="LaunchApplication" >
                  <conditionalExecution enable="true" useMethodTag="rdkshell_check_app_launch_type2" useIterableArg="true" />
                  <params>
                    <param tag="callsign" iteration="true" useConfigFile="true" key="RDKSHELL_PREREQ_PLUGINS" />
                    <param tag="type" value="HtmlApp"  />
                    <param tag="uri"  useConfigFile="true" key="RDKSHELL_WEBKIT_LAUNCH_URL"  />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_for_results" />
              </subtestStep>
            </testStep>
          </prerequisite>
          <prerequisite requisiteId="4" requisiteName="Register_And_Listen_Events" type="eventRegister" trace="false">
            <event pluginName="RDKShell" eventName="Event_On_Launched" />
            <event pluginName="RDKShell" eventName="Event_On_Suspended" />
            <event pluginName="RDKShell" eventName="Event_On_Destroyed" />
            <event pluginName="RDKShell" eventName="Event_On_UserInactivity" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Activated" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Connected" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Disconnected" />
            <event pluginName="RDKShell" eventName="Event_On_Application_FirstFrame" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Resumed" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Suspended" />
            <event pluginName="RDKShell" eventName="Event_On_Application_Terminated" />
          </prerequisite>

        </pluginPreRequisite>

        <!-- Test case 01 -->
        <testCase testCaseId="RDKShell_01" testCaseName= "RDKShell_Application_MoveToFront" desc="Move given client to the top or front of the Z order">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="movefront" method="MoveToFront">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="1" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 02 -->
        <testCase testCaseId="RDKShell_02" testCaseName= "RDKShell_Application_MoveToBack" desc="Move given client to the back or bottom of the Z order">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="moveback" method="MoveToBack">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>


        <!-- Test case 03 -->
        <testCase testCaseId="RDKShell_03" testCaseName= "RDKShell_Application_MoveBehind" desc="Moves the client behind the specified target">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="movebehind" method="MoveBehind">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="target"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="1,target" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 04 -->
        <testCase testCaseId="RDKShell_04" testCaseName= "RDKShell_Application_SetFocus" desc="Set focus to an application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setfocus" method="SetFocus">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 05 -->
        <testCase testCaseId="RDKShell_05" testCaseName= "RDKShell_Application_AddKey_Intercept" desc="Add key intercept">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="addkeyintercept" method="AddKeyIntercept">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="keyCode"   useDefault="true" />
                <param tag="modifiers"   useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 06 -->
        <testCase testCaseId="RDKShell_06" testCaseName= "RDKShell_Application_RemoveKey_Intercept" desc="Remove key intercept">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="removekeyintercept" method="RemoveKeyIntercept">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="keyCode"   useDefault="true" />
                <param tag="modifiers"   useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 07 -->
        <testCase testCaseId="RDKShell_07" testCaseName= "RDKShell_GetScreen_Resolution" desc="Get Screen resolution">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="getscreenresolution" method="GetScreenResolution">
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 08 -->
        <testCase testCaseId="RDKShell_08" testCaseName= "RDKShell_SetScreen_Resolution" desc="Set Screen resolution">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="setscreenresolution" method="SetScreenResolution">
              <params>
                <param tag="w"  useDefault="true" />
                <param tag="h"  useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 09 -->
        <testCase testCaseId="RDKShell_09" testCaseName= "RDKShell_SetandGet_Screen_Resolution" desc="Set and Get Screen resolution">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="getscreenresolution" method="GetScreenResolution" saveResult="true" revertGet="yes">
              <resultGeneration useMethodTag="rdkshell_check_for_results"/>
            </testStep>
            <testStep testStepId="2" name="setscreenresolution" method="SetScreenResolution" revertSet="yes">
              <params>
                <!-- #TODO: Insted of hard coding the values, read the current resolution from displaysetting plugin and set accordingly -->
                <param tag="w"   value="1920" revertParam="yes" />
                <param tag="h"   value="1080" revertParam="yes" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="getscreenresolution" method="GetScreenResolution" revertFlag="yes" delay="1">
              <resultGeneration useMethodTag="rdkshell_check_for_resolution_set" expectedValues="1920,1080" />
            </testStep>
        </testCase>


        <!-- Test case 10 -->
        <testCase testCaseId="RDKShell_10" testCaseName= "RDKShell_GetClients" desc="Get connected client list">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_get_result_status"/>
            </testStep>
        </testCase>

        <!-- Test case 11 -->
        <!-- #TODO: Shall also include a test case to change z order using moveBehind method and check z order using getZOrder method -->
        <testCase testCaseId="RDKShell_11" testCaseName= "RDKShell_GetZOrder" desc="list applications in Z order">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getZorder" method="GetZOrder">
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 12 -->
        <testCase testCaseId="RDKShell_12" testCaseName= "RDKShell_Application_Get_Bounds" desc="Get boundary of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getbounds" method="GetBounds">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 13 -->
        <testCase testCaseId="RDKShell_13" testCaseName= "RDKShell_Application_Set_Bounds" desc="Set boundary of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setbounds" method="SetBounds">
              <params>
                <param tag="x"   useDefault="true" />
                <param tag="y"   useDefault="true" />
                <param tag="w"   useDefault="true" />
                <param tag="h"   useDefault="true" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 14 -->
        <testCase testCaseId="RDKShell_14" testCaseName= "RDKShell_SetandGet_Bound" desc="Set and Get application boundary">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getbounds" method="GetBounds" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_bounds" />
            </testStep>
            <testStep testStepId="3" name="setbounds" method="SetBounds" revertSet="yes">
              <params>
                <param tag="x" value="50" revertParam="yes" />
                <param tag="y" value="50" revertParam="yes" />
                <param tag="w" value="400" revertParam="yes" />
                <param tag="h" value="700" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getbounds" method="GetBounds" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_bounds" expectedValues= "50,50,400,700" />
            </testStep>
        </testCase>

        <!-- Test case 15 -->
        <testCase testCaseId="RDKShell_15" testCaseName= "RDKShell_Application_Get_Visibility" desc="Get visibility of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getvisibility" method="GetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_visibility_result"  expectedValues="true, false"/>
            </testStep>
        </testCase>

        <!-- Test case 16 -->
        <testCase testCaseId="RDKShell_16" testCaseName= "RDKShell_Application_Set_Visibility" desc="Set visibility of given client">
        <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setvisibility" method="SetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="visible"  value="false" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="setvisibility" method="SetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="visible"  value="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 17 -->
        <testCase testCaseId="RDKShell_17" testCaseName= "RDKShell_SetandGet_Visibility" desc="Set and Get application Visibility">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getvisibility" method="GetVisibility" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="setvisibility" method="SetVisibility" revertSet="yes">
              <params>
                <param tag="visible" usePreviousResult="true" Id="2" useMethodTag="visibility_toggle_status" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getvisibility" method="GetVisibility" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_visibility_result" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="visibility_toggle_status" />
              </resultGeneration>
            </testStep>
        </testCase>


        <!-- Test case 18 -->
        <testCase testCaseId="RDKShell_18" testCaseName= "RDKShell_Application_Get_Opacity" desc="Get opacity of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getopacity" method="GetOpacity">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" />
            </testStep>
        </testCase>

        <!-- Test case 19 -->
        <testCase testCaseId="RDKShell_19" testCaseName= "RDKShell_Application_Set_Opacity" desc="Set opacity of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setopacity" method="SetOpacity">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="opacity" useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>


        <!-- Test case 20 -->
        <testCase testCaseId="RDKShell_20" testCaseName= "RDKShell_SetandGet_Opacity" desc="Set and Get opacity Visibility">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getopacity" method="GetOpacity" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" />
            </testStep>
            <testStep testStepId="3" name="setopacity" method="SetOpacity" revertSet="yes">
              <params>
                <param tag="opacity" usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_opacity_value" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getopacity" method="GetOpacity" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_opacity_value" />
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 21 -->
        <testCase testCaseId="RDKShell_21" testCaseName= "RDKShell_Application_GetScale" desc="Get scaling params of an application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="GetScale" method="GetScale">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 22 -->
        <testCase testCaseId="RDKShell_22" testCaseName= "RDKShell_Application_SetScale" desc="Scale an Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setscale" method="SetScale">
              <params>
                <param tag="sx" value="1" />
                <param tag="sy" value="1" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 23 -->
        <testCase testCaseId="RDKShell_23" testCaseName= "RDKShell_SetandGet_Application_Scale" desc="Set and Get application scaling params">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getscale" method="GetScale" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="setscale" method="SetScale" revertSet="yes">
              <params>
                <!-- #TODO: Insted of hard coding the values, read the current scale from displaysetting plugin and set accordingly -->
                <param tag="sx"   usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" arguments="sx" revertParam="yes" />
                <param tag="sy"   usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" arguments="sy" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getscale" method="GetScale" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_verify_scale_params" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" />
              </resultGeneration>
            </testStep>
        </testCase>
         
          <!-- Test case 24 -->
        <testCase testCaseId="RDKShell_24" testCaseName= "RDKShell_Suspend_Resume_Cobalt" desc="Resume cobalt  application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Resume_Cobalt" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="4" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>

        </testCase>


        <!-- Test case 25 -->
        <testCase testCaseId="RDKShell_25" testCaseName= "RDKShell_Suspend_Resume_WebKitBrowser" desc="Resume WebKitBrowser  application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="WebKitBrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Resume_WebKitBrowser" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="WebKitBrowser" />
                <param tag="type" value="HtmlApp"  />
                <param tag="uri"  useConfigFile="true" key="RDKSHELL_WEBKIT_LAUNCH_URL"  />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="4" name="Is_WebKitBrowser_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="WebKitBrowser" expectedValues="resumed" />
            </testStep>

        </testCase>

        <!-- Test case 26 -->
        <testCase testCaseId="RDKShell_26" testCaseName= "RDKShell_Perform_Animation" desc="Performs animation">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="Add_Animation" method="Add_Animation">
              <params paramKey="animations">
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="x" value="0" />
                <param tag="y" value="0" />
                <param tag="w" value="1920" />
                <param tag="h" value="1080" />
                <param tag="sx" value="0.5" />
                <param tag="sy" value="0.5" />
                <param tag="tween" value="outbounce" />
                <param tag="duration" value="3" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="2" name="Remove_Animation" method="Remove_Animation" delay="3">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 27 -->
        <testCase testCaseId="RDKShell_27" testCaseName= "RDKShell_Perform_multiple_Animation" desc="Performs multiple animation">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="Add_Animation" method="Add_Animation">
              <params paramKey="animations">
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="x" value="100" />
                <param tag="y" value="200" />
                <param tag="w" value="1920" />
                <param tag="h" value="1080" />
                <param tag="sx" value="0.5" />
                <param tag="sy" value="0.5" />
                <param tag="tween" value="outelastic" />
                <param tag="duration" value="3" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
             <testStep testStepId="3" name="Add_Animation" method="Add_Animation">
              <params paramKey="animations">
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="1" />
                <param tag="x" value="200" />
                <param tag="y" value="100" />
                <param tag="w" value="1920" />
                <param tag="h" value="1080" />
                <param tag="sx" value="0.5" />
                <param tag="sy" value="0.5" />
                <param tag="tween" value="outbounce" />
                <param tag="duration" value="3" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 28 -->
        <testCase testCaseId="RDKShell_28" testCaseName= "RDKShell_Application_Types" desc="Gets the application types">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Available_Types" method="Get_Available_Types" >
              <resultGeneration useMethodTag="rdkshell_check_for_results"/>
            </testStep>
        </testCase>



        <!-- Test case 29 -->
        <testCase testCaseId="RDKShell_29" testCaseName= "RDKShell_Destroy_Resume_Cobalt" desc="Destroy and resumes Cobalt application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="4" name="Resume_Cobalt" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 30 -->
        <testCase testCaseId="RDKShell_30" testCaseName= "RDKShell_Destroy_Resume_WebKitBrowser" desc="Destroy and resumes WebKitBrowser application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="WebKitBrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="4" name="Resume_WebKitBrowser" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="WebKitBrowser" />
                <param tag="type" value="HtmlApp"  />
                <param tag="uri"  useConfigFile="true" key="RDKSHELL_WEBKIT_LAUNCH_URL"  />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_WebKitBrowser_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="WebKitBrowser" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 31 -->
        <testCase testCaseId="RDKShell_31" testCaseName="RDKShell_Check_On_Launched_Event_Cobalt" desc="Checks on launched event" >
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Launch_Application" method="LaunchApplication">
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="Check_On_Launched_Event" event="Event_On_Launched" action="eventListener" delay="3">
                <resultGeneration useMethodTag="rdkshell_check_on_launched_event" expectedValues="Cobalt,resume"/>
            </testStep>
            <testStep testStepId="4" name="Is_Cobalt_Resumed" method="Get_Application_State"  >
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 32 -->
        <testCase testCaseId="RDKShell_32" testCaseName="RDKShell_Check_On_Suspended_Event_Cobalt" desc="Checks on suspended event">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Check_On_Suspended_Event" event="Event_On_Suspended" action="eventListener" delay="3">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="4" name="Resume_Cobalt" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 33 -->
        <testCase testCaseId="RDKShell_33" testCaseName= "RDKShell_Check_On_Destroyed_Event_Cobalt" desc="Checks on destroyed events">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Check_On_Destroyed_Event" event="Event_On_Destroyed" action="eventListener" delay="3">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="4" name="Resume_Cobalt" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 34 -->

        <testCase testCaseId="RDKShell_34" testCaseName= "RDKShell_User_Inactivity_Reporting" desc="Checks user inactivity interval">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Enable_Inactivity_Reporting" method="Enable_Inactivity_Reporting">
              <params>
                <param tag="enable"  value="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Inactivity_Interval" method="Set_Inactivity_Interval" >
              <params>
                <param tag="interval"  value="1" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status"  />
            </testStep>
            <testStep testStepId="3" name="Check_On_UserInactivity_Event" event="Event_On_UserInactivity" action="eventListener" delay="120">
              <resultGeneration useMethodTag="rdkshell_check_on_userinactivity_event"  arguments="Check_user_inactive" expectedValues="1"  />
            </testStep>
            <testStep testStepId="4" name="Disable_Inactivity_Reporting" method="Enable_Inactivity_Reporting" >
              <params>
                <param tag="enable"  value="false" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>
        <!-- Test case 35 -->

        <testCase testCaseId="RDKShell_35" testCaseName= "RDKShell_Check_User_Active" desc="Checks whether user active">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Enable_Inactivity_Reporting" method="Enable_Inactivity_Reporting">
              <params>
                <param tag="enable"  value="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="2" name="Set_Inactivity_Interval" method="Set_Inactivity_Interval" >
              <params>
                <param tag="interval"  value="1" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status"  />
            </testStep>
            <testStep testStepId="3"   name="Generate_Key" method="GenerateKey" delay="30" >
              <params paramKey="keys">
                <param tag="keyCode" value="13" />
                <param tag="modifiers" useDefault="true" />
                <param tag="delay" value="1.0"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>

            <testStep testStepId="3" name="Check_On_UserInactivity_Event" event="Event_On_UserInactivity" action="eventListener" delay="30">
              <resultGeneration useMethodTag="rdkshell_check_on_userinactivity_event" arguments="Check_user_active"  />
            </testStep>
            <testStep testStepId="4" name="Disable_Inactivity_Reporting" method="Enable_Inactivity_Reporting" >
              <params>
                <param tag="enable"  value="false" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 36 -->
        <testCase testCaseId="RDKShell_36" testCaseName= "RDKShell_Suspend_Resume_WebKitBrowser_Check_State" desc="Checks webkitbrowser suspend resume states">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="WebKitBrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Is_WebKitBrowser_Suspended" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="WebKitBrowser" expectedValues="suspended" />
            </testStep>
            <testStep testStepId="4" name="Resume_WebKitBrowser" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="WebKitBrowser" />
                <param tag="type" value="HtmlApp"  />
                <param tag="uri"  useConfigFile="true" key="RDKSHELL_WEBKIT_LAUNCH_URL"  />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_WebKitBrowser_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="WebKitBrowser" expectedValues="resumed" />
            </testStep>
        </testCase>


        <!-- Test case 37 -->
        <testCase testCaseId="RDKShell_37" testCaseName= "RDKShell_Suspend_Resume_Cobalt_Check_State" desc="Checks cobalt suspend resume states">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Is_Cobalt_Suspended" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="suspended" />
            </testStep>
            <testStep testStepId="4" name="Resume_Cobalt" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase>


        <!-- Test case 38 -->
        <testCase testCaseId="RDKShell_38" testCaseName= "RDKShell_Application_Suspend" desc="Suspend given application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_Applications" method="Get_Application_State" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_check_for_results"/>
            </testStep>
            <testStep testStepId="2" name="suspendapplication" method="SuspendApplication" >
              <params>
                <param tag="callsign" usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_clients_state" arguments="0"  />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>
        
        <!-- Test case 39 -->
        <testCase testCaseId="RDKShell_39" testCaseName="Enable_And_Disable_Hole_Punch_Cobalt"  desc="Checks whether able to enable and disable hole punch for client cobalt">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <params>
                  <param tag="client" value="cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" saveResult="true" revertGet="yes" >
              <params>
                  <param tag="client" value="cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_hole_punch" expectedValues="True" />
            </testStep>
            <testStep testStepId="3" name="Enable_And_Disable_Hole_Punch" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_Hole_Punch" method="Set_Hole_Punch" revertSet="yes">
                  <params>
                    <param tag="client" value="cobalt" />
                    <param tag="holePunch" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" revertFlag="yes" >
                  <params>
                      <param tag="client" value="cobalt" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_hole_punch" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

        <!-- Test case 40 -->
        <testCase testCaseId="RDKShell_40" testCaseName="Enable_And_Disable_Hole_Punch_WebKitBrowser"  desc="Checks whether able to enable and disable hole punch for client webkitbrowser">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <params>
                  <param tag="client" value="webkitbrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" saveResult="true" revertGet="yes" >
              <params>
                  <param tag="client" value="webkitbrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_hole_punch" expectedValues="True" />
            </testStep>
            <testStep testStepId="3" name="Enable_And_Disable_Hole_Punch" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_Hole_Punch" method="Set_Hole_Punch" revertSet="yes">
                  <params>
                    <param tag="client" value="webkitbrowser" />
                    <param tag="holePunch" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" revertFlag="yes" >
                  <params>
                      <param tag="client" value="webkitbrowser" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_hole_punch" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

        <!-- Test case 41 -->
        <testCase testCaseId="RDKShell_41" testCaseName="Check_Logging_Level"  desc="Checks whether able to set and get various logging level" >
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_Log_Level" method="Get_Log_Level" saveResult="true" revertGet="yes" >
              <resultGeneration useMethodTag="rdkshell_check_log_level" >
              </resultGeneration>
            </testStep>
            <testStep testStepId="2" name="Check_Logging_Level" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_Log_Level" method="Set_Log_Level" revertSet="yes">
                  <params>
                    <param tag="logLevel" value="DEBUG,INFO,WARN,ERROR,FATAL" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_Log_Level" method="Get_Log_Level" revertFlag="yes" >
                  <resultGeneration useMethodTag="rdkshell_check_log_level" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

        <!-- Test case 42 -->
        <testCase testCaseId="RDKShell_42" testCaseName="Set_Client_TopMost"  desc="Sets the last client to top most client" >
            <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="getZorder" method="GetZOrder" saveResult="true" >
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="2" name="Set_TopMost" method="Set_TopMost" >
              <params>
                  <param tag="client" usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_last_client_zorder"  />
                  <param tag="topmost" value="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status"/>
            </testStep>
            <testStep testStepId="3" name="getZorder" method="GetZOrder" saveResult="true" >
              <resultGeneration useMethodTag="rdkshell_validate_topmost_client" >
                  <expectedValues usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_last_client_zorder" />
              </resultGeneration>
            </testStep>
        </testCase>
        
        <!-- Test case 43 -->
	<testCase testCaseId="RDKShell_43" testCaseName="Enable_And_Disable_Key_Repeats"  desc="Checks whether able to enable and disable the key repeats">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_KeyRepeats_Enabled" method="Get_KeyRepeats_Enabled"  saveResult="true" revertGet="yes">
              <resultGeneration useMethodTag="rdkshell_check_key_repeats_status" />
            </testStep>
            <testStep testStepId="2" name="Enable_And_Disable_Key_Repeats" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Enable_KeyRepeats" method="Enable_KeyRepeats" revertSet="yes">
                  <params>
                    <param tag="enable" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_KeyRepeats_Enabled" method="Get_KeyRepeats_Enabled" revertFlag="yes" >
                  <resultGeneration useMethodTag="rdkshell_check_key_repeats_status" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

        <!-- Test case 44 -->
        <testCase testCaseId="RDKShell_44" testCaseName="RDKShell_Launch_LightningApp" desc="Checks if able to launch Lightning app" >
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Launch_Application" method="LaunchApplication">
              <params>
                <param tag="callsign" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="2" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "lightningapp" />
            </testStep>
        </testCase>        

        <!-- Test case 45 -->
	<testCase testCaseId="RDKShell_45" testCaseName="RDKShell_Launch_HtmlApp" desc="Checks if able to launch Html App" >
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Launch_Application" method="LaunchApplication">
              <params>
                <param tag="callsign" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="2" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "htmlapp" />
            </testStep>
        </testCase>

        <!-- Test case 46 -->
        <testCase testCaseId="RDKShell_46" testCaseName= "RDKShell_Suspend_Resume_LightningApp_Check_State" desc="Checks lightning app suspend resume states">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Is_LightningApp_Suspended" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="LightningApp" expectedValues="suspended" />
            </testStep>
            <testStep testStepId="4" name="Resume_LightningApp" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_LightningApp_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="LightningApp" expectedValues="resumed" />
            </testStep>
        </testCase>        

        <!-- Test case 47 -->
        <testCase testCaseId="RDKShell_47" testCaseName= "RDKShell_Suspend_Resume_HtmlApp_Check_State" desc="Checks Html app suspend resume states">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="2" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Is_HtmlApp_Suspended" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="HtmlApp" expectedValues="suspended" />
            </testStep>
            <testStep testStepId="4" name="Resume_HtmlApp" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_HtmlApp_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="HtmlApp" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 48 -->
	<testCase testCaseId="RDKShell_48" testCaseName= "RDKShell_Destroy_Resume_LightningApp" desc="Destroy and resumes Lightning application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="2" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="4" name="Resume_LightningApp" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_LightningApp_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="LightningApp" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 49 -->
	<testCase testCaseId="RDKShell_49" testCaseName= "RDKShell_Destroy_Resume_HtmlApp" desc="Destroy and resumes Html application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="2" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="4" name="Resume_HtmlApp" method="LaunchApplication" delay="3" >
              <params>
                <param tag="callsign" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_HtmlApp_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="HtmlApp" expectedValues="resumed" />
            </testStep>
        </testCase>

	<!-- Test case 50 -->
	<testCase testCaseId="RDKShell_50" testCaseName="Enable_And_Disable_Hole_Punch_LightningApp"  desc="Checks whether able to enable and disable hole punch for client lightning app">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <params>
                  <param tag="client" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" saveResult="true" revertGet="yes" >
              <params>
                  <param tag="client" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_hole_punch" expectedValues="True" />
            </testStep>
            <testStep testStepId="3" name="Enable_And_Disable_Hole_Punch" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_Hole_Punch" method="Set_Hole_Punch" revertSet="yes">
                  <params>
                    <param tag="client" value="LightningApp" />
                    <param tag="holePunch" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" revertFlag="yes" >
                  <params>
                      <param tag="client" value="LightningApp" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_hole_punch" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

	<!-- Test case 51 -->
        <testCase testCaseId="RDKShell_51" testCaseName="Enable_And_Disable_Hole_Punch_HtmlApp"  desc="Checks whether able to enable and disable hole punch for client html app">
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <params>
                  <param tag="client" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" saveResult="true" revertGet="yes" >
              <params>
                  <param tag="client" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_hole_punch" expectedValues="True" />
            </testStep>
            <testStep testStepId="3" name="Enable_And_Disable_Hole_Punch" testStepType="loop" >
              <subtestStep subtestStepId="1" name="Set_Hole_Punch" method="Set_Hole_Punch" revertSet="yes">
                  <params>
                    <param tag="client" value="HtmlApp" />
                    <param tag="holePunch" value="True,False" iteration="true" revertParam="yes" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_get_result_status" />
              </subtestStep>
              <subtestStep subtestStepId="2" name="Get_Hole_Punch" method="Get_Hole_Punch" revertFlag="yes" >
                  <params>
                      <param tag="client" value="HtmlApp" />
                  </params>
                  <resultGeneration useMethodTag="rdkshell_check_hole_punch" >
                    <expectedValues useIterableValue="true" />
                  </resultGeneration>
              </subtestStep>
            </testStep>
        </testCase>

	<!-- Test case 52 -->
	<testCase testCaseId="RDKShell_52" testCaseName= "RDKShell_Check_On_Application_Activated_Event" desc="Checks for the Application activated event" >
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getZorder" method="GetZOrder" saveResult="true" >
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="setfocus" method="SetFocus">
              <params>
                <param tag="client" usePreviousResult="true" Id="2" useMethodTag="rdkshell_get_zorder" arguments="0"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="Add_Key_Listener" method="AddKeyListener">
              <params paramKey="keys" >
                <param tag="client" usePreviousResult="true" Id="2" useMethodTag="rdkshell_get_zorder" arguments="1" />
                <param tag="keyCode" value ="16" />
                <param tag="activate" value ="true" />
                <param tag="propagate" value ="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="5"   name="Generate_Key" method="GenerateKey">
              <params paramKey="keys">
                <param tag="keyCode" value="16" />
                <param tag="modifiers" useDefault="true" />
                <param tag="delay" value="1.0"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="6" name="Check_On_Application_Activated_Event" event="Event_On_Application_Activated" action="eventListener" delay="3">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" >
                   <expectedValues usePreviousResult="true" Id="2" useMethodTag="rdkshell_get_zorder" arguments="1" />
                </resultGeneration>
            </testStep>
            <testStep testStepId="7" name="Remove_Key_Listener" method="RemoveKeyListener">
              <params paramKey="keys" >
                <param tag="client" usePreviousResult="true" Id="2" useMethodTag="rdkshell_get_zorder" arguments="1" />
                <param tag="keyCode" value ="16" />
                <param tag="activate" value ="true" />
                <param tag="propagate" value ="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 53 -->
        <testCase testCaseId="RDKShell_53" testCaseName= "RDKShell_Enable_Disable_Virtual_Display_Cobalt" desc="Checks whether able to enable and disable the virtual display for the cobalt client" >
            <testCaseInfo testCaseType="setandget" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Get_Virtual_Display_Enabled" method="Get_Virtual_Display_Enabled" saveResult="true" revertGet="yes" >
              <params>
                <param tag="client" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_enabled_status" />
            </testStep>
            <testStep testStepId="3" name="Enable_Virtual_Display" method="Enable_Virtual_Display" revertSet="yes">
              <params>
                <param tag="client" value="Cobalt" />
                <param tag="enable" usePreviousResult="true" Id="2" useMethodTag="rdkshell_toggle_enabled_status" revertParam="yes" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="Get_Virtual_Display_Enabled" method="Get_Virtual_Display_Enabled" revertFlag="yes">
                <params>
                   <param tag="client" value="Cobalt" />
                </params>
                <resultGeneration useMethodTag="rdkshell_get_enabled_status" >
                   <expectedValues usePreviousResult="true" Id="2" useMethodTag="rdkshell_toggle_enabled_status" />
                </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 54 -->
        <testCase testCaseId="RDKShell_54" testCaseName= "RDKShell_Enable_Disable_Virtual_Display_WebKitBrowser" desc="Checks whether able to enable and disable the virtual display for the webkitbrowser client" >
            <testCaseInfo testCaseType="setandget" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Get_Virtual_Display_Enabled" method="Get_Virtual_Display_Enabled" saveResult="true" revertGet="yes" >
              <params>
                <param tag="client" value="WebKitBrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_enabled_status" />
            </testStep>
            <testStep testStepId="3" name="Enable_Virtual_Display" method="Enable_Virtual_Display" revertSet="yes">
              <params>
                <param tag="client" value="WebKitBrowser" />
                <param tag="enable" usePreviousResult="true" Id="2" useMethodTag="rdkshell_toggle_enabled_status" revertParam="yes" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="Get_Virtual_Display_Enabled" method="Get_Virtual_Display_Enabled" revertFlag="yes">
                <params>
                   <param tag="client" value="WebKitBrowser" />
                </params>
                <resultGeneration useMethodTag="rdkshell_get_enabled_status" >
                   <expectedValues usePreviousResult="true" Id="2" useMethodTag="rdkshell_toggle_enabled_status" />
                </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 55 -->
        <testCase testCaseId="RDKShell_55" testCaseName= "RDKShell_Set_And_Get_Virtual_Resolution_Cobalt" desc="Checks whether able to set and get the virtual resolution for the cobalt client" >
            <testCaseInfo testCaseType="setandget" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Get_Virtual_Resolution" method="Get_Virtual_Resolution" saveResult="true" revertGet="yes" >
              <params>
                <param tag="client" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_virtual_resolution" />
            </testStep>
            <testStep testStepId="3" name="Get_Width_And_Height" action="externalFnCall" saveResult="true" >
              <resultGeneration useMethodTag="RDKShell_Get_Width_And_Height" >
                 <arguments useConfigFile="true" key="RESOLUTION_WIDTH_HEIGHT_MAPPING"/>
              </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Set_Virtual_Resolution" method="Set_Virtual_Resolution" revertSet="yes">
              <params>
                <param tag="client" value="Cobalt" />
                <param tag="width" usePreviousResult="true" Id="3" useMethodTag="rdkshell_set_virtual_resolution" revertParam="yes" />
                <param tag="height" usePreviousResult="true" Id="3" useMethodTag="rdkshell_set_virtual_resolution" revertParam="yes" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="5" name="Get_Virtual_Resolution" method="Get_Virtual_Resolution" revertFlag="yes">
                <params>
                   <param tag="client" value="Cobalt" />
                </params>
                <resultGeneration useMethodTag="rdkshell_get_virtual_resolution" arguments="check_virtual_resolutions">
                   <expectedValues usePreviousResult="true"  Id="3" useMethodTag="rdkshell_set_virtual_resolution" />
                </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 56 -->
        <testCase testCaseId="RDKShell_56" testCaseName= "RDKShell_Set_And_Get_Virtual_Resolution_WebKitBrowser" desc="Checks whether able to set and get the virtual resolution for the webkitbrowser client" >
            <testCaseInfo testCaseType="loop" revert="true"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "webkitbrowser" />
            </testStep>
            <testStep testStepId="2" name="Get_Virtual_Resolution" method="Get_Virtual_Resolution" saveResult="true" revertGet="yes" >
              <params>
                <param tag="client" value="WebKitBrowser" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_virtual_resolution" />
            </testStep>
            <testStep testStepId="3" name="Get_Width_And_Height" action="externalFnCall" saveResult="true" >
              <resultGeneration useMethodTag="RDKShell_Get_Width_And_Height" >
                 <arguments useConfigFile="true" key="RESOLUTION_WIDTH_HEIGHT_MAPPING"/>
              </resultGeneration>
            </testStep>
            <testStep testStepId="4" name="Set_Virtual_Resolution" method="Set_Virtual_Resolution" revertSet="yes">
                <params>
                  <param tag="client" value="WebKitBrowser" />
                  <param tag="width" usePreviousResult="true" Id="3" useMethodTag="rdkshell_set_virtual_resolution" revertParam="yes" />
                  <param tag="height" usePreviousResult="true" Id="3" useMethodTag="rdkshell_set_virtual_resolution" revertParam="yes" />
                </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="5" name="Get_Virtual_Resolution" method="Get_Virtual_Resolution" revertFlag="yes">
                <params>
                  <param tag="client" value="WebKitBrowser" />
                </params>
                <resultGeneration useMethodTag="rdkshell_get_virtual_resolution" arguments="check_virtual_resolutions">
                   <expectedValues usePreviousResult="true"  Id="3" useMethodTag="rdkshell_set_virtual_resolution" />
                </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 57 -->
        <testCase testCaseId="RDKShell_57" testCaseName= "RDKShell_Check_Application_Life_Cycle_Events_For_Cobalt" desc="Checks the application life cycle events for the cobalt application">
            <testCaseInfo testCaseType="direct"/>
            <testCasePreRequisite>
                 <prerequisite requisiteId="1" requisiteName="Destroy_Cobalt_Application">
                   <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
                        <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
                   </testStep>
                   <testStep testStepId="2" name="Destroy_Cobalt_Application" method="DestroyApplication" >
                      <params>
                          <param tag="callsign" value="Cobalt" />
                      </params>
                      <resultGeneration useMethodTag="rdkshell_get_result_status" />
                   </testStep>
                 </prerequisite>
            </testCasePreRequisite>

            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="Launch_Cobalt" method="LaunchApplication" delay="2" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="Is_Cobalt_Resumed" method="GetClients" delay="2">
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_if_exists" expectedValues="cobalt" />
            </testStep>
            <testStep testStepId="4" name="Check_On_Application_Connected_Event" event="Event_On_Application_Connected" action="eventListener" clear="false" >
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="5" name="Check_On_Application_First_Frame_Event" event="Event_On_Application_FirstFrame" action="eventListener" >
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="6" name="Suspend_Application" method="SuspendApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="7" name="Check_On_Application_Suspended_Event" event="Event_On_Application_Suspended" action="eventListener"  delay="2">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="8" name="Launch_Cobalt" method="LaunchApplication" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="9" name="Is_Cobalt_Resumed" method="GetClients" delay="2">
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_if_exists" expectedValues="cobalt" />
            </testStep>
            <testStep testStepId="10" name="Check_On_Application_Resumed_Event" event="Event_On_Application_Resumed" action="eventListener"  delay="2">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="11" name="Destroy_Application" method="DestroyApplication" >
              <params>
                <param tag="callsign"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="12" name="Get_connected_clients" method="GetClients" delay="2">
              <resultGeneration useMethodTag="rdkshell_check_application"  arguments= "check_not_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="13" name="Check_On_Application_Disconnected_Event" event="Event_On_Application_Disconnected" action="eventListener"  clear="false">
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
            <testStep testStepId="14" name="Check_On_Application_Terminated_Event" event="Event_On_Application_Terminated" action="eventListener" >
                <resultGeneration useMethodTag="rdkshell_check_application_state_event" expectedValues="Cobalt"/>
            </testStep>
        <testCasePostRequisite>
         <postrequisite requisiteId="1" requisiteName="Resuming_Cobalt_Application">
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="Launch_Cobalt" method="LaunchApplication" >
              <conditionalExecution enable="true" Id="1" useMethodTag="rdkshell_check_application_state" arguments="cobalt" />
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
         </postrequisite>
        </testCasePostRequisite>
        </testCase>

        <!-- Test case 58 -->
        <testCase testCaseId="RDKShell_58" testCaseName= "RDKShell_Application_Kill_Cobalt" desc="Kill Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="2" name="killapp" method="Kill">
              <params>
                <param tag="client"  value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_not_exists" expectedValues= "cobalt" />
            </testStep>
            <testStep testStepId="4" name="Launch_Application_Cobalt" method="LaunchApplication" delay="5" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Cobalt_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="Cobalt" expectedValues="resumed" />
            </testStep>
        </testCase> 

	<!-- Test case 59 -->
	<testCase testCaseId="RDKShell_59" testCaseName= "RDKShell_Application_Kill_LightningApp" desc="Kill LightningApp Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="2" name="kill_LightningApp" method="Kill">
              <params>
                <param tag="client"  value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_not_exists" expectedValues= "lightningapp" />
            </testStep>
            <testStep testStepId="4" name="Launch_Application_LightningApp" method="LaunchApplication" delay="5" >
              <params>
                <param tag="callsign" value="LightningApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_LightningApp_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="LightningApp" expectedValues="resumed" />
            </testStep>
        </testCase>

	<!-- Test case 60 -->
	<testCase testCaseId="RDKShell_60" testCaseName= "RDKShell_Application_Kill_HtmlApp" desc="Kill HtmlApp Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments= "check_if_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="2" name="kill_HtmlApp" method="Kill">
              <params>
                <param tag="client"  value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_application" arguments="check_not_exists" expectedValues= "htmlapp" />
            </testStep>
            <testStep testStepId="4" name="Launch_Application_HtmlApp" method="LaunchApplication" delay="5" >
              <params>
                <param tag="callsign" value="HtmlApp" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="5" name="Is_Html_Resumed" method="Get_Application_State" delay="2">
              <resultGeneration useMethodTag="rdkshell_get_state" arguments="HtmlApp" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 61 -->
        <testCase testCaseId="RDKShell_61" testCaseName= "RDKShell_System_Resource_Info" desc="Gets the system resource info">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_System_Resource_Info" method="Get_System_Resource_Info" >
              <resultGeneration useMethodTag="rdkshell_check_for_results"/>
            </testStep>
        </testCase>
        
        <!-- Test case 62 -->
        <testCase testCaseId="RDKShell_62" testCaseName= "RDKShell_SetandGet_Bound_For_Invalid_Application" desc="Set and Get application boundary for invalid client">
            <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="getbounds" method="GetBounds" saveResult="true" revertGet="yes">
              <params>
                <param tag="client" value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to get bounds" />
            </testStep>
            <testStep testStepId="2" name="setbounds" method="SetBounds" revertSet="yes">
              <params>
                <param tag="x" value="50" />
                <param tag="y" value="50" />
                <param tag="w" value="400" />
                <param tag="h" value="700"  />
                <param tag="client"  value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to set bounds" />
            </testStep>
        </testCase>

        <!-- Test case 63 -->
        <testCase testCaseId="RDKShell_63" testCaseName= "RDKShell_SetandGet_Opacity_For_Invalid_Application" desc="Set and Get opacity Visibility for invalid client">
            <testCaseInfo testCaseType="direct" />
            <testStep testStepId="1" name="getopacity" method="GetOpacity" saveResult="true" revertGet="yes">
              <params>
                <param tag="client" value="dummy-client"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to get opacity" />
            </testStep>
            <testStep testStepId="2" name="setopacity" method="SetOpacity" revertSet="yes">
              <params>
                <param tag="opacity" value="50" />
                <param tag="client"  value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to set opacity" />
            </testStep>
        </testCase>

        <!-- Test case 64 -->
        <testCase testCaseId="RDKShell_64" testCaseName= "RDKShell_SetandGet_Visibility_For_Invalid_Application" desc="Set and Get application Visibility for invalid client">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="getvisibility" method="GetVisibility" saveResult="true" revertGet="yes">
              <params>
                <param tag="client" value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to get visibility" />
            </testStep>
            <testStep testStepId="2" name="setvisibility" method="SetVisibility" revertSet="yes">
              <params>
                <param tag="visible" value ="true"/>
                <param tag="client"  value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to set visibility" />
            </testStep>
        </testCase>

        <!-- Test case 65 -->
        <testCase testCaseId="RDKShell_65" testCaseName= "RDKShell_Application_SetFocus_For_Invalid_Application" desc="Set focus to an invalid application ">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="setfocus" method="SetFocus">
              <params>
                <param tag="client" value="dummy-client" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to set focus" />
            </testStep>
        </testCase> 
        
        <!-- Test case 66 -->
        <testCase testCaseId="RDKShell_66" testCaseName= "RDKShell_SetandGet_Application_Scale_For_Invalid_Application" desc="Set and Get application scaling params for invalid client">
            <testCaseInfo testCaseType="direct" revert="true" />
            <testStep testStepId="1" name="getscale" method="GetScale" saveResult="true" revertGet="yes">
              <params>
                <param tag="client" value="dummy-client"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to get scale"/>
            </testStep>
            <testStep testStepId="2" name="setscale" method="SetScale">
              <params>
                <param tag="sx" value="1.5" />
                <param tag="sy"  value="1.5"/>
                <param tag="client" value="dummy-client"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_check_error_message" expectedValues="failed to set scale"/>
            </testStep>
        </testCase>
         
        <!-- Test case 67 -->
        <testCase testCaseId="RDKShell_67" testCaseName= "RDKShell_Show_And_Hide_Splash_Screen" desc="Shows and hides splash screen logo">
            <testCaseInfo testCaseType="direct" configurableTest="true" testKey="RDKSHELL_SUPPORTED_FEATURES" useMethodTag="rdkshell_check_feature_applicability" arguments="splashscreen" />
            <testCasePreRequisite>
                <prerequisite requisiteId="1" requisiteName="Check_Environment_Variable_In_Service_File">
                  <testStep testStepId="1" name="Check_Environment_Variable_In_Service_File" action="externalFnCall" >
                    <resultGeneration useMethodTag="Check_Environment_Variable_In_Service_File" expectedValues = "RDKSHELL_SPLASH_IMAGE_JPEG" />
                  </testStep>
                </prerequisite>
            </testCasePreRequisite>
            <testStep testStepId="1" name="Show_Splash_Logo" method="Show_Splash_Logo" >
              <params>
                <param tag="displayTime" value="15"/>
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status"/>
            </testStep>
            <testStep testStepId="2" name="Hide_Splash_Logo" method="Hide_Splash_Logo" delay="10" >
              <resultGeneration useMethodTag="rdkshell_get_result_status"/>
            </testStep>
        </testCase>
</testPlugin>
