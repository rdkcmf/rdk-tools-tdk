<?xml version="1.0" encoding="UTF-8"?>
<!--
 If not stated otherwise in this file or this component's Licenses.txt file the
 following copyright and licenses apply:
 Copyright 2020 RDK Management
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<testPlugin pluginName="RDKShell" pluginVersion="1">
        <pluginPreRequisite>
          <prerequisite requisiteId="1" requisiteName="Activate_RDKShell_Plugin">
            <testStep testStepId="1" name="Check_PluginActive_Status" method="Get_Plugin_Status" saveResult="true" pluginName="Controller">
                <params>
                  <param tag="plugin" value="org.rdk.RDKShell" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.RDKShell" />
            </testStep>
            <testStep testStepId="2" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.RDKShell" />
                <params>
                  <param tag="callsign" value="org.rdk.RDKShell" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
                <conditionalExecution enable="true" Id="1" useMethodTag="controller_get_plugin_state" arguments="isDeactivated,org.rdk.RDKShell" />
                <params>
                  <param tag="plugin" value="org.rdk.RDKShell" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,org.rdk.RDKShell" expectedValues="activated"/>
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="2" requisiteName="Deactivate_And_Activate_Plugins">
            <testStep testStepId="1" name="Check_And_Deactivate_Plugins" testStepType="loop">
              <subtestStep subtestStepId="1" name="Deactivate_Plugin" method="Deactivate_Plugin"  pluginName="Controller">
                <params>
                  <param tag="callsign"  iteration="true" useConfigFile="true" key="RDKSHELL_PREREQ_PLUGINS" />
                </params>
              </subtestStep>
              <subtestStep subtestStepId="2" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller" >
                <params>
                  <param tag="plugin" useIterable="true" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" expectedValues="deactivated">
                  <arguments value="check_status" useIterableArg="true" />
                </resultGeneration>
              </subtestStep>
              <subtestStep subtestStepId="3" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller">
                <params>
                  <param tag="callsign" useIterable="true" />
                </params>
              </subtestStep>
              <subtestStep subtestStepId="4" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller">
                <params>
                  <param tag="plugin" useIterable="true" indexOnly="true" />
                </params>
                <resultGeneration useMethodTag="controller_get_plugin_state" expectedValues="activated,suspended,resumed">
                  <arguments value="check_status" useIterableArg="true" />
                </resultGeneration>
              </subtestStep>
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="3" requisiteName="Check_And_Resume_WebKitBrowser">
            <testStep testStepId="1" name="Is_WebKitBrowser_Resumed" method="Get_WebKitBrowser_State" pluginName="WebKitBrowser" saveResult="true" >
                <resultGeneration useMethodTag="webkitbrowser_get_state" />
            </testStep>
            <testStep testStepId="2" name="Resume_WebKitBrowser" method="Set_WebKitBrowser_State" pluginName="WebKitBrowser" >
                <conditionalExecution enable="true" Id="1" useMethodTag="webkitbrowser_check_state" arguments="isSuspended" />
                <params>
                  <param tag="state" useDefault="true" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Is_WebKitBrowser_Resumed" method="Get_WebKitBrowser_State" pluginName="WebKitBrowser" delay="5">
                <conditionalExecution enable="true" Id="1" useMethodTag="webkitbrowser_check_state" arguments="isSuspended" />
                <resultGeneration useMethodTag="webkitbrowser_get_state" expectedValues="resumed" />
            </testStep>
          </prerequisite>

          <prerequisite requisiteId="4" requisiteName="Check_And_Resume_Cobalt">
            <testStep testStepId="1" name="Is_Cobalt_Resumed" method="Get_Cobalt_State" pluginName="Cobalt" saveResult="true" >
                <resultGeneration useMethodTag="cobalt_get_state" />
            </testStep>
            <testStep testStepId="2" name="Resume_Cobalt" method="Set_Cobalt_State" pluginName="Cobalt" >
                <conditionalExecution enable="true" Id="1" useMethodTag="cobalt_check_state" arguments="isSuspended" />
                <params>
                  <param tag="state" useDefault="true" />
                </params>
            </testStep>
            <testStep testStepId="3" name="Is_Cobalt_Resumed" method="Get_Cobalt_State" pluginName="Cobalt" delay="5">
                <conditionalExecution enable="true" Id="1" useMethodTag="cobalt_check_state" arguments="isSuspended" />
                <resultGeneration useMethodTag="cobalt_get_state" expectedValues="resumed" />
            </testStep>
          </prerequisite>
        </pluginPreRequisite>

        <!-- Test case 01 -->
        <testCase testCaseId="RDKShell_01" testCaseName= "RDKShell_Application_MoveToFront_01" desc="Move given client to the top or front of the Z order">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="movefront" method="MoveToFront">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 02 -->
        <testCase testCaseId="RDKShell_02" testCaseName= "RDKShell_Application_MoveToBack_02" desc="Move given client to the back or bottom of the Z order">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="moveback" method="MoveToBack">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>


        <!-- Test case 03 -->
        <testCase testCaseId="RDKShell_03" testCaseName= "RDKShell_Application_MoveBehind_03" desc="Moves the client behind the specified target">
           <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="movebehind" method="MoveBehind">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="target"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="1,target" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 04 -->
        <testCase testCaseId="RDKShell_04" testCaseName= "RDKShell_Application_SetFocus_04" desc="Set focus to an application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setfocus" method="SetFocus">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 05 -->
        <!-- For now killing "cobalt" application and validating the method. later this needs to be made as generic case -->
        <testCase testCaseId="RDKShell_05" testCaseName= "RDKShell_Application_Kill_05" desc="Kill Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="killapp" method="Kill">
              <params>
                <param tag="client"  value="cobalt" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="2" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_check_if_application_killed" expectedValues= "cobalt" />
            </testStep>
            <!-- Starting Cobalt application again -->
            <testStep testStepId="3" name="Activate_Plugin" method="Activate_Plugin"  pluginName="Controller" >
              <params>
                <param tag="callsign" value="Cobalt" />
              </params>
            </testStep>
            <testStep testStepId="4" name="Check_PluginActive_Status" method="Get_Plugin_Status" pluginName="Controller"  >
              <params>
                <param tag="plugin" value="Cobalt" indexOnly="true" />
              </params>
              <resultGeneration useMethodTag="controller_get_plugin_state" arguments="check_status,Cobalt" expectedValues="resumed"/>
            </testStep>
            <testStep testStepId="5" name="Resume_Cobalt" method="Set_Cobalt_State" pluginName="Cobalt" >
              <params>
                <param tag="state" useDefault="true" />
              </params>
            </testStep>
            <testStep testStepId="6" name="Is_Cobalt_Resumed" method="Get_Cobalt_State" pluginName="Cobalt" delay="5">
              <resultGeneration useMethodTag="cobalt_get_state" expectedValues="resumed" />
            </testStep>
        </testCase>

        <!-- Test case 06 -->
        <testCase testCaseId="RDKShell_06" testCaseName= "RDKShell_Application_AddKey_Intercept_06" desc="Add key intercept">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="addkeyintercept" method="AddKeyIntercept">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="keyCode"   useDefault="true" />
                <param tag="modifiers"   useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 07 -->
        <testCase testCaseId="RDKShell_07" testCaseName= "RDKShell_Application_RemoveKey_Intercept_07" desc="Remove key intercept">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="removekeyintercept" method="RemoveKeyIntercept">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="keyCode"   useDefault="true" />
                <param tag="modifiers"   useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 08 -->
        <testCase testCaseId="RDKShell_08" testCaseName= "RDKShell_GetScreen_Resolution_08" desc="Get Screen resolution">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="getscreenresolution" method="GetScreenResolution">
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 09 -->
        <testCase testCaseId="RDKShell_09" testCaseName= "RDKShell_SetScreen_Resolution_09" desc="Set Screen resolution">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="setscreenresolution" method="SetScreenResolution">
              <params>
                <param tag="w"  useDefault="true" />
                <param tag="h"  useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 10 -->
        <testCase testCaseId="RDKShell_10" testCaseName= "RDKShell_SetandGet_Screen_Resolution_10" desc="Set and Get Screen resolution">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="getscreenresolution" method="GetScreenResolution" saveResult="true" revertGet="yes">
              <resultGeneration useMethodTag="rdkshell_check_for_results"/>
            </testStep>
            <testStep testStepId="2" name="setscreenresolution" method="SetScreenResolution" revertSet="yes">
              <params>
                <!-- #TODO: Insted of hard coding the values, read the current resolution from displaysetting plugin and set accordingly -->
                <param tag="w"   value="1920" revertParam="yes" />
                <param tag="h"   value="1080" revertParam="yes" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="getscreenresolution" method="GetScreenResolution" revertFlag="yes">
              <resultGeneration useMethodTag="rdkshell_check_for_resolution_set" expectedValues="1920,1080" />
            </testStep>
        </testCase>


        <!-- Test case 11 -->
        <testCase testCaseId="RDKShell_11" testCaseName= "RDKShell_GetClients_11" desc="Get connected client list">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_get_result_status"/>
            </testStep>
        </testCase>

        <!-- Test case 12 -->
        <!-- #TODO: Shall also include a test case to change z order using moveBehind method and check z order using getZOrder method -->
        <testCase testCaseId="RDKShell_12" testCaseName= "RDKShell_GetZOrder_12" desc="list applications in Z order">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" >
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getZorder" method="GetZOrder">
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 13 -->
        <testCase testCaseId="RDKShell_13" testCaseName= "RDKShell_Application_Get_Bounds_13" desc="Get boundary of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getbounds" method="GetBounds">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 14 -->
        <testCase testCaseId="RDKShell_14" testCaseName= "RDKShell_Application_Set_Bounds_14" desc="Set boundary of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setbounds" method="SetBounds">
              <params>
                <param tag="x"   useDefault="true" />
                <param tag="y"   useDefault="true" />
                <param tag="w"   useDefault="true" />
                <param tag="h"   useDefault="true" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 15 -->
        <testCase testCaseId="RDKShell_15" testCaseName= "RDKShell_SetandGet_Bound_15" desc="Set and Get application boundary">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getbounds" method="GetBounds" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_bounds" />
            </testStep>
            <testStep testStepId="3" name="setbounds" method="SetBounds" revertSet="yes">
              <params>
                <param tag="x" value="50" revertParam="yes" />
                <param tag="y" value="50" revertParam="yes" />
                <param tag="w" value="400" revertParam="yes" />
                <param tag="h" value="700" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getbounds" method="GetBounds" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_bounds" expectedValues= "50,50,400,700" />
            </testStep>
        </testCase>

        <!-- Test case 16 -->
        <testCase testCaseId="RDKShell_16" testCaseName= "RDKShell_Application_Get_Visibility_16" desc="Get visibility of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getvisibility" method="GetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_visibility_result"  expectedValues="true, false"/>
            </testStep>
        </testCase>

        <!-- Test case 17 -->
        <testCase testCaseId="RDKShell_17" testCaseName= "RDKShell_Application_Set_Visibility_17" desc="Set visibility of given client">
        <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setvisibility" method="SetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="visible"  value="false" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="3" name="setvisibility" method="SetVisibility">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="visible"  value="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 18 -->
        <testCase testCaseId="RDKShell_18" testCaseName= "RDKShell_SetandGet_Visibility_18" desc="Set and Get application Visibility">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getvisibility" method="GetVisibility" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="setvisibility" method="SetVisibility" revertSet="yes">
              <params>
                <param tag="visible" usePreviousResult="true" Id="2" useMethodTag="visibility_toggle_status" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getvisibility" method="GetVisibility" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_visibility_result" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="visibility_toggle_status" />
              </resultGeneration>
            </testStep>
        </testCase>


        <!-- Test case 19 -->
        <testCase testCaseId="RDKShell_19" testCaseName= "RDKShell_Application_Get_Opacity_19" desc="Get opacity of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getopacity" method="GetOpacity">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" />
            </testStep>
        </testCase>

        <!-- Test case 20 -->
        <testCase testCaseId="RDKShell_20" testCaseName= "RDKShell_Application_Set_Opacity_20" desc="Set opacity of given client">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setopacity" method="SetOpacity">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
                <param tag="opacity" useDefault="true" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>


        <!-- Test case 21 -->
        <testCase testCaseId="RDKShell_21" testCaseName= "RDKShell_SetandGet_Opacity_21" desc="Set and Get opacity Visibility">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getopacity" method="GetOpacity" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" />
            </testStep>
            <testStep testStepId="3" name="setopacity" method="SetOpacity" revertSet="yes">
              <params>
                <param tag="opacity" usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_opacity_value" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getopacity" method="GetOpacity" saveResult="true" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_validate_opacity" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_opacity_value" />
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 22 -->
        <testCase testCaseId="RDKShell_22" testCaseName= "RDKShell_Application_GetScale_22" desc="Get scaling params of an application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="GetScale" method="GetScale">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
        </testCase>

        <!-- Test case 23 -->
        <testCase testCaseId="RDKShell_23" testCaseName= "RDKShell_Application_SetScale_23" desc="Scale an Application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="setscale" method="SetScale">
              <params>
                <param tag="sx" value="1" />
                <param tag="sy" value="1" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>

        <!-- Test case 24 -->
        <testCase testCaseId="RDKShell_24" testCaseName= "RDKShell_SetandGet_Application_Scale_24" desc="Set and Get application scaling params">
            <testCaseInfo testCaseType="setandget" revert="true" />
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="getscale" method="GetScale" saveResult="true" revertGet="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_check_for_results" />
            </testStep>
            <testStep testStepId="3" name="setscale" method="SetScale" revertSet="yes">
              <params>
                <!-- #TODO: Insted of hard coding the values, read the current scale from displaysetting plugin and set accordingly -->
                <param tag="sx"   usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" arguments="sx" revertParam="yes" />
                <param tag="sy"   usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" arguments="sy" revertParam="yes" />
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
            <testStep testStepId="4" name="getscale" method="GetScale" revertFlag="yes">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_verify_scale_params" >
                <expectedValues  usePreviousResult="true" Id="2" useMethodTag="rdkshell_generate_new_scale_value" />
              </resultGeneration>
            </testStep>
        </testCase>

        <!-- Test case 25 -->
        <!-- #TODO For now added scenarios for webkitbrowser & cobalt applications and validating the method. later this will be made as generic case -->
        <testCase testCaseId="RDKShell_25" testCaseName= "RDKShell_Application_Suspend_25" desc="Suspend given application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="suspendapplication" method="SuspendApplication">
              <params>
                <param tag="callsign"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0,callsign" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
		    <!-- #TODO need to add test step for resuming the application with launch method -->
        </testCase>

        <!-- Test case 26 -->
	    <!-- resumeapplication method is depricated. This will be replaced by launch application -->
	    <!--
        <testCase testCaseId="RDKShell_26" testCaseName= "RDKShell_Application_Suspend_26" desc="Resume given application">
            <testCaseInfo testCaseType="direct"/>
            <testStep testStepId="1" name="Get_connected_clients" method="GetClients" saveResult="true">
              <resultGeneration useMethodTag="rdkshell_get_connected_client_list"/>
            </testStep>
            <testStep testStepId="2" name="resumeapplication" method="ResumeApplication">
              <params>
                <param tag="client"  usePreviousResult="true" Id="1" useMethodTag="rdkshell_get_connected_client" arguments="0" />
              </params>
              <resultGeneration useMethodTag="rdkshell_get_result_status" />
            </testStep>
        </testCase>
		-->

</testPlugin>
