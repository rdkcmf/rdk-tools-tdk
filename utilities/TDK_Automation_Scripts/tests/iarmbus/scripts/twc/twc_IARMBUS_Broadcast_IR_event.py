##########################################################################
# If not stated otherwise in this file or this component's Licenses.txt
# file the following copyright and licenses apply:
#
# Copyright 2016 RDK Management
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

#This python script is autogenerated by parsing the original scripts imported from the Database
#This script is supposed to be called from the genericscript.py 
#TODO:replace this caling script name with correct one


'''
<?xml version='1.0' encoding='utf-8'?>
<xml>
  <id>81</id>
  <!-- Do not edit id. This will be auto filled while exporting. If you are adding a new script keep the id empty -->
  <version>1</version>
  <!-- Do not edit version. This will be auto incremented while updating. If you are adding a new script you can keep the vresion as 1 -->
  <name>IARMBUS Broadcast IR event</name>
  <!-- If you are adding a new script you can specify the script name. -->
  <primitive_test_id>18</primitive_test_id>
  <!-- Do not change primitive_test_id if you are editing an existing script. -->
  <primitive_test_name>IARMBUS_BroadcastEvent</primitive_test_name>
  <!--  -->
  <primitive_test_version>6</primitive_test_version>
  <!--  -->
  <status>ALLOCATED</status>
  <!--  -->
  <synopsis>This test script Broadcasts an IR event to all the registered apps in IARM BUS
Test Case ID : CT_IARMBUS_17</synopsis>
  <!--  -->
  <groups_id />
  <!--  -->
  <execution_time>5</execution_time>
  <!--  -->
  <long_duration>false</long_duration>
  <!-- execution_time is the time out time for test execution -->
  <remarks></remarks>
  <!-- Reason for skipping the tests if marked to skip -->
  <skip>false</skip>
  <!--  -->
  <box_types>
    <box_type>Hybrid-1</box_type>
    <!--  -->
    <box_type>IPClient-3</box_type>
    <!--  -->
  </box_types>
  <rdk_versions>
    <rdk_version>RDK2.0</rdk_version>
    <!--  -->
    <rdk_version>RDK1.3</rdk_version>
    <!--  -->
  </rdk_versions>
</xml>

'''
#TODO: validate which imports are necessary and remove others
import sys;
from time import gmtime, strftime;
import tdklib;
import time;
import datalib;
import numpy as np;



import time;

def executeTests(obj):
	
	loadmodulestatus =obj.getLoadModuleResult();
	print "Iarmbus module loading status :  %s" %loadmodulestatus ;
	if "SUCCESS" in loadmodulestatus.upper():
	        #Set the module loading status
	        obj.setLoadModuleStatus("SUCCESS");
	        #calling IARMBUS API "IARM_Bus_Init"
	        tdkTestObj = obj.createTestStep('IARMBUS_Init',0);
	        expectedresult="SUCCESS"
	        tdkTestObj.executeTestCase(expectedresult);
	        actualresult = tdkTestObj.getResult();
	        details=tdkTestObj.getResultDetails();
	        #Check for SUCCESS/FAILURE return value of IARMBUS_Init
	        if ("SUCCESS" in actualresult):
	                tdkTestObj.setResultStatus("SUCCESS");
	                print "SUCCESS: Application successfully initialized with IARMBUS library";
	                #calling IARMBUS API "IARM_Bus_Connect"
	                tdkTestObj = obj.createTestStep('IARMBUS_Connect',0);
	                expectedresult="SUCCESS"
	                tdkTestObj.executeTestCase(expectedresult);
	                actualresult = tdkTestObj.getResult();
	                details=tdkTestObj.getResultDetails();
	                #Check for SUCCESS/FAILURE return value of IARMBUS_Connect
	                if expectedresult in actualresult:
	                        tdkTestObj.setResultStatus("SUCCESS");
	                        print "SUCCESS: Application successfully connected with IARM-Bus Daemon";
	                        #Run another application to receive broadcasted events
	                        #calling IARMBUS API "IARM_Bus_RegisterEventHandler"
	                        tdkTestObj = obj.createTestStep('IARMBUS_RegisterEventHandler',0);
	                        #registering event handler for IR Key events
	                        tdkTestObj.addParameter("owner_name","IRMgr");
	                        tdkTestObj.addParameter("event_id",0);
	                        expectedresult="SUCCESS"
	                        tdkTestObj.executeTestCase(expectedresult);
	                        actualresult = tdkTestObj.getResult();
	                        details=tdkTestObj.getResultDetails();
	                        #Check for SUCCESS/FAILURE return value of IARMBUS_RegisterEventHandler
	                        if expectedresult in actualresult:
	                                tdkTestObj.setResultStatus("SUCCESS");
	                                print "SUCCESS: Event Handler registered for IR key events";
	                                #sleep for 10 sec to receive IR key event that is broadcasted from second app.
	                                time.sleep(10);
	                                tdkTestObj = obj.createTestStep('IARMBUS_InvokeSecondApplication',0);
	                                expectedresult="SUCCESS"
	                                tdkTestObj.executeTestCase(expectedresult);
	                                actualresult = tdkTestObj.getResult();
	                                #details=tdkTestObj.getResultDetails();
	                                #Check for SUCCESS/FAILURE return value of IARMBUS_InvokeSecondApplication
	                                if expectedresult in actualresult:
	                                        tdkTestObj.setResultStatus("SUCCESS");
	                                        print "SUCCESS: Second application Invoked successfully";
	                                else:
	                                        tdkTestObj.setResultStatus("FAILURE");
	                                        print "FAILURE: Second application failed to execute";
	                                tdkTestObj = obj.createTestStep('IARMBUS_GetLastReceivedEventDetails',5);
	                                expectedresult="SUCCESS"
	                                tdkTestObj.executeTestCase(expectedresult);
	                                actualresult = tdkTestObj.getResult();
	                                details=tdkTestObj.getResultDetails();
	                                print details;
	                                #Check for SUCCESS/FAILURE return value of IARMBUS_GetLastReceivedEventDetails
	                                if expectedresult in actualresult:
	                                        tdkTestObj.setResultStatus("SUCCESS");
	                                        print "SUCCESS: GetLastReceivedEventDetails executed successfully";
	                                else:
	                                        tdkTestObj.setResultStatus("FAILURE");
	                                        print "FAILURE: GetLastReceivedEventDetails failed";
	                                tdkTestObj = obj.createTestStep('IARMBUS_UnRegisterEventHandler',0);
	                                #deregistering IR event handler
	                                tdkTestObj.addParameter("owner_name","IRMgr");
	                                tdkTestObj.addParameter("event_id",0);
	                                expectedresult="SUCCESS"
	                                tdkTestObj.executeTestCase(expectedresult);
	                                actualresult = tdkTestObj.getResult();
	                                details=tdkTestObj.getResultDetails();
	                                #Check for SUCCESS/FAILURE return value of IARMBUS_UnRegisterEventHandler
	                                if expectedresult in actualresult:
	                                        tdkTestObj.setResultStatus("SUCCESS");
	                                        print "SUCCESS: UnRegister Event Handler for IR key events";
	                                else:
	                                        tdkTestObj.setResultStatus("FAILURE");
	                                        print "FAILURE : IARM_Bus_UnRegisterEventHanlder failed. %s " %details;
	                        else:
	                                tdkTestObj.setResultStatus("FAILURE");
	                                print "FAILURE : IARM_Bus_RegisterEventHandler failed. %s " %details;
	                        #calling IARMBUS API "IARM_Bus_DisConnect"
	                        tdkTestObj = obj.createTestStep('IARMBUS_DisConnect',0);
	                        expectedresult="SUCCESS"
	                        tdkTestObj.executeTestCase(expectedresult);
	                        actualresult = tdkTestObj.getResult();
	                        details=tdkTestObj.getResultDetails();
	                        #Check for SUCCESS/FAILURE return value of IARMBUS_DisConnect
	                        if expectedresult in actualresult:
	                                tdkTestObj.setResultStatus("SUCCESS");
	                                print "SUCCESS: Application successfully disconnected from IARMBus";
	                        else:
	                                tdkTestObj.setResultStatus("FAILURE");
	                                print "FAILURE: IARM_Bus_Disconnect failed. %s " %details;
	                else:
	                        tdkTestObj.setResultStatus("FAILURE");
	                        print "FAILURE: IARM_Bus_Connect failed. %s" %details;
	
	                #calling IARMBUS API "IARM_Bus_Term"
	                tdkTestObj = obj.createTestStep('IARMBUS_Term',0);
	                expectedresult="SUCCESS";
	                tdkTestObj.executeTestCase(expectedresult);
	                actualresult = tdkTestObj.getResult();
	                details=tdkTestObj.getResultDetails();
	                #Check for SUCCESS/FAILURE return value of IARMBUS_Term
	                if expectedresult in actualresult:
	                        tdkTestObj.setResultStatus("SUCCESS");
	                        print "SUCCESS: IARM_Bus term success";
	                else:
	                        tdkTestObj.setResultStatus("FAILURE");
	                        print "FAILURE: IARM_Bus Term failed";
	        else:
	                tdkTestObj.setResultStatus("FAILURE");
	                print "FAILURE: IARM_Bus_Init failed. %s " %details;
	
	        print "[TEST EXECUTION RESULT] : %s" %actualresult;
	        #Unload the iarmbus module
	        obj.unloadModule("iarmbus");
	else:
	        print"Load module failed";
	        #Set the module loading status
	        obj.setLoadModuleStatus("FAILURE");
	
